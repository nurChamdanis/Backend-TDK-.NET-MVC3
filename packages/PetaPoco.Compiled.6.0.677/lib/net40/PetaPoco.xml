<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PetaPoco</name>
    </assembly>
    <members>
        <member name="T:PetaPoco.ColumnAttribute">
            <summary>
            The ColumnAttribute class defines an attribute for POCO properties that map to a database column.
            </summary>
            <remarks>
            This attribute can be used to override the default mapped column name, provide hints to PetaPoco for how to treat DateTime and
            String columns, and further customize INSERT and UPDATE operations with the use of string templates.
            </remarks>
        </member>
        <member name="P:PetaPoco.ColumnAttribute.Name">
            <summary>
            Gets or sets the database column name this property maps to.
            </summary>
            <value>When not <see langword="null"/>, overrides this property's inflected column name from the mapper.</value>
        </member>
        <member name="P:PetaPoco.ColumnAttribute.ForceToAnsiString">
            <summary>
            Gets or sets whether the column is of type <see cref="T:PetaPoco.AnsiString"/> (SQL DB data type <c>VARCHAR</c>).
            </summary>
            <remarks>
            For use with <see cref="T:System.String"/> properties. This property is implicitly <see langword="true"/> for properties of type <see
            cref="T:PetaPoco.AnsiString"/>.
            </remarks>
        </member>
        <member name="P:PetaPoco.ColumnAttribute.ForceToDateTime2">
            <summary>
            Gets or sets whether the column is of type <see cref="T:PetaPoco.DateTime2"/>.
            </summary>
            <remarks>
            For use with <see cref="T:System.DateTime"/> properties. This property is implicitly <see langword="true"/> for properties of type <see
            cref="T:PetaPoco.DateTime2"/>.
            </remarks>
        </member>
        <member name="P:PetaPoco.ColumnAttribute.ForceToUtc">
            <summary>
            Gets or sets whether the <see cref="F:System.Data.DbType.DateTime">DbType.DateTime</see> or <see
            cref="F:System.Data.DbType.DateTime2">DbType.DateTime2</see> values in this DB column are always UTC.
            </summary>
            <remarks>
            No conversion is applied - the <see cref="T:System.DateTimeKind"/> of the POCO property's underlying <see cref="T:System.DateTime"/> value is
            simply set to correctly reflect the UTC timezone as an invariant.
            </remarks>
            <value>If <see langword="true"/>, the underlying <see cref="T:System.DateTime"/>'s <see cref="T:System.DateTimeKind"/> property is set to <see
            cref="F:System.DateTimeKind.Utc">Utc</see>; otherwise, the default is used (<see
            cref="F:System.DateTimeKind.Unspecified">Unspecified</see>).</value>
        </member>
        <member name="P:PetaPoco.ColumnAttribute.InsertTemplate">
            <summary>
            Gets or sets the INSERT string template.
            </summary>
            <remarks>
            When set, this template is used for generating the INSERT portion of the SQL statement instead of the default
            <br/><c>String.Format("{0}{1}", paramPrefix, index)</c>.
            <para>Setting this allows database-related interactions, such as:
            <br/><c>String.Format("CAST({0}{1} AS JSON)", paramPrefix, index)</c>.</para>
            </remarks>
        </member>
        <member name="P:PetaPoco.ColumnAttribute.UpdateTemplate">
            <summary>
            Gets or sets the UPDATE string template.
            </summary>
            <remarks>
            When set, this template is used for generating the UPDATE portion of the SQL statement instead of the default
            <br/><c>String.Format("{0} = {1}{2}", colName, paramPrefix, index)</c>.
            <para>Setting this allows database-related interactions, such as:
            <br/><c>String.Format("{0} = CAST({1}{2} AS JSON)", colName, paramPrefix, index)</c></para>
            </remarks>
        </member>
        <member name="M:PetaPoco.ColumnAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PetaPoco.ColumnAttribute"/> class with default values.
            </summary>
        </member>
        <member name="M:PetaPoco.ColumnAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PetaPoco.ColumnAttribute"/> class with the specified column name.
            </summary>
            <param name="column">The name of the database column associated with this property.</param>
        </member>
        <member name="T:PetaPoco.ExplicitColumnsAttribute">
            <summary>
            The ExplicitColumnsAttribute class defines an attribute for POCO classes specifying that only explicitly-marked properties should be
            mapped to columns in the database table.
            </summary>
            <remarks>
            When using this attribute, any properties <i>not</i> decorated with one of the following attributes are ignored by the mapper:
            <list type="bullet">
            <item><see cref="T:PetaPoco.ColumnAttribute"/></item>
            <item><see cref="T:PetaPoco.ResultColumnAttribute"/></item>
            </list>
            </remarks>
            <seealso cref="T:PetaPoco.IgnoreAttribute"/>
        </member>
        <member name="T:PetaPoco.IgnoreAttribute">
            <summary>
            The IgnoreAttribute class defines an attribute for POCO properties that should be explicitly ignored by the mapper.
            </summary>
            <remarks>
            Properties decorated with this attribute are completely ignored by PetaPoco, and do not participate in any database-related
            operations.
            <para>If you find yourself using this attribute excessively, consider instead decorating your POCO class with the <see
            cref="T:PetaPoco.ExplicitColumnsAttribute"/>, and then marking the properties you want mapped with their appropriate column attribute.</para>
            </remarks>
            <seealso cref="T:PetaPoco.ExplicitColumnsAttribute"/>
        </member>
        <member name="T:PetaPoco.PrimaryKeyAttribute">
            <summary>
            The PrimaryKeyAttribute class defines an attribute for POCO properties that map to primary key columns in the database.
            </summary>
            <remarks>
            The PrimaryKeyAttribute, when used in a POCO class, designates the decorated property as the primary key column in the database. It
            can also be used to override the default mapped column name for the primary key, mark the column as auto-incrementing, and
            optionally assign a sequence name for Oracle sequence columns.
            </remarks>
        </member>
        <member name="P:PetaPoco.PrimaryKeyAttribute.Value">
            <summary>
            Gets the column name in the database.
            </summary>
        </member>
        <member name="P:PetaPoco.PrimaryKeyAttribute.SequenceName">
            <summary>
            Gets or sets the optional sequence name, for Oracle databases.
            </summary>
        </member>
        <member name="P:PetaPoco.PrimaryKeyAttribute.AutoIncrement">
            <summary>
            Gets or sets whether the primary key column represented by this property in the database is auto-incrementing.
            Default is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:PetaPoco.PrimaryKeyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PetaPoco.PrimaryKeyAttribute"/> class with the specified column name.
            </summary>
            <param name="primaryKeyName">The database table's primary key column name that this property maps to.</param>
        </member>
        <member name="T:PetaPoco.IncludeInAutoSelect">
            <summary>
            Specifies whether a property should be included in SQL auto-select queries.
            </summary>
        </member>
        <member name="F:PetaPoco.IncludeInAutoSelect.No">
            <summary>
            The property should not be included in auto-select queries.
            </summary>
        </member>
        <member name="F:PetaPoco.IncludeInAutoSelect.Yes">
            <summary>
            The property should be included in auto-select queries.
            </summary>
        </member>
        <member name="T:PetaPoco.ResultColumnAttribute">
            <summary>
            The ResultColumnAttribute class defines an attribute for POCO properties that should be used in <b>SQL queries only</b>, but ignored
            in UPDATE and INSERT operations.
            </summary>
            <remarks>
            This attribute marks properties that are mapped to a column, but should not be involved in any mutating operations on the database.
            The property value is updated by queries from the database, but the database column it maps to will not be changed to reflect
            changes in this property.
            <para>Use the <see cref="P:PetaPoco.ResultColumnAttribute.IncludeInAutoSelect"/> property to dictate whether the decorated property is included in operations using
            PetaPoco's AutoSelect feature (default is <see cref="F:PetaPoco.IncludeInAutoSelect.No"/>). Auto-select queries are operations made using the
            "short form" syntax, without specifying the <c>SELECT [cols] FROM [table]</c> portion of the SQL statement. The inferred portion of
            the SQL statement is then automatically generated by PetaPoco based on generics or the called method's parameters.</para>
            </remarks>
        </member>
        <member name="P:PetaPoco.ResultColumnAttribute.IncludeInAutoSelect">
            <summary>
            Gets or sets a value indicating whether the property should be included in auto-select queries.
            Default is <see cref="F:PetaPoco.IncludeInAutoSelect.No"/>.
            </summary>
        </member>
        <member name="M:PetaPoco.ResultColumnAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PetaPoco.ResultColumnAttribute"/> class with default values.
            </summary>
        </member>
        <member name="M:PetaPoco.ResultColumnAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PetaPoco.ResultColumnAttribute"/> class with the specified column name.
            </summary>
            <param name="column">The name of the database column associated with this property.</param>
        </member>
        <member name="M:PetaPoco.ResultColumnAttribute.#ctor(PetaPoco.IncludeInAutoSelect)">
            <summary>
            Initializes a new instance of the <see cref="T:PetaPoco.ResultColumnAttribute"/> class with the specified auto-select inclusion setting.
            </summary>
            <param name="includeInAutoSelect">Specifies whether the property should be included in auto-select queries.</param>
        </member>
        <member name="M:PetaPoco.ResultColumnAttribute.#ctor(System.String,PetaPoco.IncludeInAutoSelect)">
            <summary>
            Initializes a new instance of the <see cref="T:PetaPoco.ResultColumnAttribute"/> class with the specified column name and auto-select
            inclusion setting.
            </summary>
            <param name="column">The name of the database column associated with this property.</param>
            <param name="includeInAutoSelect">Specifies whether the property should be included in auto-select queries.</param>
        </member>
        <member name="T:PetaPoco.TableNameAttribute">
            <summary>
            The TableNameAttribute class defines an attribute for POCO classes to specify a custom database table name that class should map to.
            </summary>
            <remarks>
            When decorating a class, the provided table name overrides the default inflected name of the active mapper.
            </remarks>
        </member>
        <member name="P:PetaPoco.TableNameAttribute.Value">
            <summary>
            Gets the database table name this POCO maps to.
            </summary>
            <value>Overrides this class's inflected table name from the mapper.</value>
        </member>
        <member name="M:PetaPoco.TableNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PetaPoco.TableNameAttribute"/> class with the specified table name.
            </summary>
            <param name="tableName">The database table name this class maps to.</param>
        </member>
        <member name="T:PetaPoco.ValueConverterAttribute">
            <summary>
            The ValueConverterAttribute class provides a base class all ValueConverters must derive from and implement.
            </summary>
            <remarks>
            ValueConverters are used to implement custom two-way conversions between your POCO property data type, and the mapped database
            column's data type. They are ideal for implementing a custom conversion without requiring any changes to the mapper.
            <para>To provide a custom ValueConverter for a property, inherit from this class, and supply definitions for both conversion methods
            for your data type. Decorate the appropriate properties that require your ValueConverter with your derived class.</para>
            </remarks>
        </member>
        <member name="M:PetaPoco.ValueConverterAttribute.ConvertFromDb(System.Object)">
            <summary>
            Converts the given <paramref name="value"/> from the database type to your POCO's property type.
            </summary>
            <param name="value">The database value to be converted.</param>
            <returns>The converted property value.</returns>
        </member>
        <member name="M:PetaPoco.ValueConverterAttribute.ConvertToDb(System.Object)">
            <summary>
            Converts the given <paramref name="value"/> from your POCO's property type to the database type.
            </summary>
            <param name="value">The property value to be converted.</param>
            <returns>The converted database value.</returns>
        </member>
        <member name="T:PetaPoco.AnsiString">
            <summary>
            Wraps a Unicode string that will be stored in a <c>VARCHAR</c> DB column as an <see cref="F:System.Data.DbType.AnsiString"/>.
            </summary>
            <remarks>
            Using this type for a column-mapped POCO property is equivalent to decorating a <see cref="T:System.String"/> property with <see
            cref="P:PetaPoco.ColumnAttribute.ForceToAnsiString"/>.
            </remarks>
        </member>
        <member name="P:PetaPoco.AnsiString.Value">
            <summary>
            Gets the Unicode string value wrapped by this instance.
            </summary>
        </member>
        <member name="M:PetaPoco.AnsiString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PetaPoco.AnsiString"/> class with the specified string.
            </summary>
            <param name="value">The string to be stored in the database as an <see cref="F:System.Data.DbType.AnsiString"/>.</param>
        </member>
        <member name="M:PetaPoco.AnsiString.op_Explicit(System.String)~PetaPoco.AnsiString">
            <summary>
            Explicitly converts a Unicode string to an <see cref="T:PetaPoco.AnsiString"/> instance.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>An AnsiString instance containing the wrapped <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="T:PetaPoco.AnsiStringExtensions">
            <summary>
            Provides extension methods for the <see cref="T:PetaPoco.AnsiString"/> class.
            </summary>
        </member>
        <member name="M:PetaPoco.AnsiStringExtensions.ToAnsiString(System.Object)">
            <summary>
            Converts an object to its <see cref="T:PetaPoco.AnsiString"/> representation.
            </summary>
            <param name="value">The object to be converted.</param>
            <returns>An AnsiString object that wraps the given <paramref name="value"/>.</returns>
        </member>
        <member name="T:PetaPoco.ColumnInfo">
            <summary>
            The ColumnInfo class stores information about a column in the database.
            </summary>
            <remarks>
            Typically ColumnInfo is automatically populated from the attributes on a POCO object and its properties. It can, however, also be
            returned from the <see cref="T:PetaPoco.IMapper"/> interface allowing you to provide your own custom bindings between the DB and your POCOs.
            </remarks>
            <seealso cref="T:PetaPoco.ColumnAttribute"/>
            <seealso cref="T:PetaPoco.Core.PocoColumn"/>
        </member>
        <member name="P:PetaPoco.ColumnInfo.ColumnName">
            <summary>
            Gets or sets the database column name this property maps to.
            </summary>
            <value>When not <see langword="null"/>, overrides this property's inflected column name from the mapper.</value>
            <seealso cref="P:PetaPoco.ColumnAttribute.Name"/>
        </member>
        <member name="P:PetaPoco.ColumnInfo.ResultColumn">
            <summary>
            Gets or sets whether this column represents a property that should be updated in queries that include a user-supplied
            <c>SELECT</c> statement, but ignored in queries generated by auto-select. Result columns are always ignored in <c>UPDATE</c> and
            <c>INSERT</c> operations.
            </summary>
            <value>If <see langword="true"/>, this property will be updated in SQL query operations containing a user-supplied <c>SELECT</c>
            statement, and ignored for all other database operations.</value>
            <seealso cref="T:PetaPoco.ResultColumnAttribute"/>
        </member>
        <member name="P:PetaPoco.ColumnInfo.AutoSelectedResultColumn">
            <summary>
            Gets or sets whether this serves as a ResultColumn that is included with auto-select queries as well as queries containing
            user-supplied <c>SELECT</c> statements.
            </summary>
            <value>If <see langword="true"/>, this property will be updated in all SQL queries, but ignored for all other database
            operations such as INSERT and UPDATE.</value>
            <seealso cref="P:PetaPoco.ResultColumnAttribute.IncludeInAutoSelect"/>
        </member>
        <member name="P:PetaPoco.ColumnInfo.ForceToAnsiString">
            <summary>
            Gets or sets a value indicating whether the column's data type should be treated as <see cref="F:System.Data.DbType.AnsiString"/>.
            </summary>
            <remarks>
            For use with <see cref="T:System.String"/> properties. This property is implicitly <see langword="true"/> for properties of type <see
            cref="T:PetaPoco.AnsiString"/>.
            </remarks>
            <value>If <see langword="true"/>, the column's data type is assumed to be <see
            cref="F:System.Data.DbType.AnsiString">DbType.AnsiString</see> (equivalent to the DB data type <c>VARCHAR</c>).</value>
            <seealso cref="T:PetaPoco.AnsiString"/>
            <seealso cref="P:PetaPoco.ColumnAttribute.ForceToAnsiString"/>
        </member>
        <member name="P:PetaPoco.ColumnInfo.ForceToDateTime2">
            <summary>
            Gets or sets a value indicating whether the column containing a DateTime data type should be treated as <see
            cref="F:System.Data.DbType.DateTime">DbType.DateTime</see>.
            </summary>
            <remarks>
            For use with <see cref="T:System.DateTime"/> properties. This property is implicitly <see langword="true"/> for properties of type <see
            cref="T:PetaPoco.DateTime2"/>.
            </remarks>
            <value>If <see langword="true"/>, the column's data type is assumed to be <see
            cref="F:System.Data.DbType.DateTime">DbType.DateTime</see>.</value>
            <seealso cref="T:PetaPoco.DateTime2"/>
            <seealso cref="P:PetaPoco.ColumnAttribute.ForceToDateTime2"/>
        </member>
        <member name="P:PetaPoco.ColumnInfo.ForceToUtc">
            <summary>
            Gets or sets a value indicating whether the DateTime value of this column should be treated as UTC.
            </summary>
            <remarks>
            For use with <see cref="T:System.DateTime"/> or <see cref="T:PetaPoco.DateTime2"/> properties. No conversion is applied - the <see
            cref="T:System.DateTimeKind"/> of the POCO property's underlying <see cref="T:System.DateTime"/> value is simply set to correctly reflect the UTC
            timezone as an invariant.
            </remarks>
            <value>If <see langword="true"/>, the DateTime value is assumed to be in UTC. If <see langword="false"/>, the <see
            cref="P:System.DateTime.Kind"/> property will be assigned <see cref="F:System.DateTimeKind.Unspecified"/>.</value>
            <seealso cref="T:PetaPoco.DateTime2"/>
            <seealso cref="P:PetaPoco.ColumnAttribute.ForceToUtc"/>
        </member>
        <member name="P:PetaPoco.ColumnInfo.InsertTemplate">
            <summary>
            Gets or sets the template used for <c>INSERT</c> operations.
            </summary>
            <remarks>
            When set, this template is used for generating the <c>INSERT</c> portion of the SQL statement instead of the default
            <br/><c>String.Format("{0}{1}", paramPrefix, index)</c>.
            <para>Setting this allows database-related interactions, such as:
            <br/><c>String.Format("CAST({0}{1} AS JSON)", paramPrefix, index)</c>.</para>
            </remarks>
            <seealso cref="P:PetaPoco.ColumnAttribute.InsertTemplate"/>
        </member>
        <member name="P:PetaPoco.ColumnInfo.UpdateTemplate">
            <summary>
            Gets or sets the template used for <c>UPDATE</c> operations.
            </summary>
            <remarks>
            When set, this template is used for generating the <c>UPDATE</c> portion of the SQL statement instead of the default
            <br/><c>String.Format("{0} = {1}{2}", colName, paramPrefix, index)</c>.
            <para>Setting this allows database-related interactions, such as:
            <br/><c>String.Format("{0} = CAST({1}{2} AS JSON)", colName, paramPrefix, index)</c></para>
            </remarks>
            <seealso cref="P:PetaPoco.ColumnAttribute.UpdateTemplate"/>
        </member>
        <member name="M:PetaPoco.ColumnInfo.FromProperty(System.Reflection.PropertyInfo)">
            <summary>
            Creates and populates a ColumnInfo from the attributes of a POCO property.
            </summary>
            <param name="propertyInfo">The POCO property to use for initializing the ColumnInfo.</param>
            <returns>A ColumnInfo instance.</returns>
        </member>
        <member name="T:PetaPoco.ConventionMapper">
            <summary>
            The ConventionMapper class represents a configurable convention mapper.
            </summary>
            <remarks>
            By default this mapper replaces the original <see cref="T:PetaPoco.StandardMapper"/> without change, ensuring backwards compatibility.
            </remarks>
        </member>
        <member name="P:PetaPoco.ConventionMapper.GetSequenceName">
            <summary>
            Gets or sets the sequence name logic (for Oracle).
            </summary>
        </member>
        <member name="P:PetaPoco.ConventionMapper.InflectColumnName">
            <summary>
            Gets or sets the inflected column name logic.
            </summary>
        </member>
        <member name="P:PetaPoco.ConventionMapper.InflectTableName">
            <summary>
            Gets or sets the inflected table name logic.
            </summary>
        </member>
        <member name="P:PetaPoco.ConventionMapper.IsPrimaryKeyAutoIncrement">
            <summary>
            Gets or sets the primary key auto-increment logic.
            </summary>
        </member>
        <member name="P:PetaPoco.ConventionMapper.MapColumn">
            <summary>
            Gets or sets the map column logic.
            </summary>
        </member>
        <member name="P:PetaPoco.ConventionMapper.MapPrimaryKey">
            <summary>
            Gets or sets the map primary key logic.
            </summary>
        </member>
        <member name="P:PetaPoco.ConventionMapper.MapTable">
            <summary>
            Gets or sets the map table logic.
            </summary>
        </member>
        <member name="P:PetaPoco.ConventionMapper.FromDbConverter">
            <summary>
            Gets or sets the from db convert logic.
            </summary>
        </member>
        <member name="P:PetaPoco.ConventionMapper.ToDbConverter">
            <summary>
            Gets or sets the to db converter logic.
            </summary>
        </member>
        <member name="M:PetaPoco.ConventionMapper.#ctor">
            <summary>
            Constructs a new instance of convention mapper.
            </summary>
        </member>
        <member name="M:PetaPoco.ConventionMapper.GetTableInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.ConventionMapper.GetColumnInfo(System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.ConventionMapper.GetFromDbConverter(System.Reflection.PropertyInfo,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.ConventionMapper.GetToDbConverter(System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="T:PetaPoco.Core.DatabaseProvider">
            <summary>
            Provides an abstract base class for database providers. This class implements common functionality and provides default behavior for
            specialized database providers.
            </summary>
            <remarks>
            This class includes methods for database-specific operations like parameter handling, SQL escaping, and paging, among others.
            Derived classes should override these methods to implement behavior specific to the database they target.
            </remarks>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.GetFactory">
            <inheritdoc/>
        </member>
        <member name="P:PetaPoco.Core.DatabaseProvider.HasNativeGuidSupport">
            <inheritdoc/>
        </member>
        <member name="P:PetaPoco.Core.DatabaseProvider.PagingUtility">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.EscapeTableName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.EscapeSqlIdentifier(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.GetParameterPrefix(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.MapParameterValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.PreExecute(System.Data.IDbCommand)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.BuildPageQuery(System.Int64,System.Int64,PetaPoco.Utilities.SQLParts,System.Object[]@)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.GetExistsSql">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.GetAutoIncrementExpression(PetaPoco.TableInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.GetInsertOutputClause(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.GetFactory(System.String[])">
            <summary>
            Returns the provider factory from one or more specified assembly qualified names.
            </summary>
            <param name="assemblyQualifiedNames">One or more assembly qualified names of the provider factory.</param>
            <returns>The provider factory.</returns>
            <exception cref="T:System.ArgumentException">None of the <paramref name="assemblyQualifiedNames"/> match a type.</exception>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.RegisterCustomProvider``1(System.String)">
            <summary>
            Registers a custom IProvider with a string that will match the beginning of the name of the provider, DbConnection, or
            DbProviderFactory.
            </summary>
            <typeparam name="T">The type of IProvider to be registered.</typeparam>
            <param name="initialString">The string to be matched against the beginning of the provider name.</param>
            <exception cref="T:System.ArgumentException"><paramref name="initialString"/> is null, empty, or consists of only white
            space.</exception>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.Resolve(System.Type,System.Boolean,System.String)">
            <summary>
            Instantiates a suitable IProvider instance based on the specified provider's type.
            </summary>
            <param name="providerType">The type of provider to be registered.</param>
            <param name="allowDefault">Specifies whether to allow the default <see cref="T:PetaPoco.Providers.SqlServerDatabaseProvider"/> to be returned if no
            matching provider is found.</param>
            <param name="connectionString">The connection string.</param>
            <returns>The resolved database provider.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="providerType"/> name cannot be matched to a provider.</exception>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.Resolve(System.String,System.Boolean,System.String)">
            <summary>
            Instantiates a suitable IProvider instance based on the specified provider name.
            </summary>
            <param name="providerName">The provider name.</param>
            <param name="allowDefault">Specifies whether to allow the default <see cref="T:PetaPoco.Providers.SqlServerDatabaseProvider"/> to be returned if no
            matching provider is found.</param>
            <param name="connectionString">The connection string.</param>
            <returns>The resolved database provider.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="providerName"/> name cannot be matched to a provider.</exception>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.Unwrap(System.Data.Common.DbProviderFactory)">
            <summary>
            Unwraps the specified wrapped provider factory/>.
            </summary>
            <param name="factory">The database provider factory to unwrap.</param>
            <returns>The unwrapped factory, or the original factory if no wrapping occurred.</returns>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.ExecuteNonQueryHelper(PetaPoco.Database,System.Data.IDbCommand)">
            <summary>
            Executes a non-query command.
            </summary>
            <param name="db">The database instance that will execute the SQL command.</param>
            <param name="cmd">The SQL command to execute.</param>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.ExecuteScalarHelper(PetaPoco.Database,System.Data.IDbCommand)">
            <summary>
            Executes a query command and returns the first column of the first row in the result set.
            </summary>
            <param name="db">The database instance that will execute the SQL command.</param>
            <param name="cmd">The SQL command to execute.</param>
            <returns>The first column of the first row in the result set.</returns>
        </member>
        <member name="T:PetaPoco.Core.Inflection.EnglishInflector">
            <summary>
            The EnglishInflector class implements inflection for the English language.
            </summary>
            <remarks>
            Author: Originally written (I believe) by Andrew Peters
            <br/>Source: Scott Kirkland (<see href="https://github.com/srkirkland/Inflector"/>)
            </remarks>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Pluralise(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Singularise(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Titleise(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Humanise(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Pascalise(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Camelise(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Underscore(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Capitalise(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Uncapitalise(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Ordinalise(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Ordinalise(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Dasherise(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:PetaPoco.Core.Inflection.IInflector">
            <summary>
            The IInflector interface specifies the inflection contract all inheriting class implementations must implement.
            </summary>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Pluralise(System.String)">
            <summary>
            Pluralises a word.
            </summary>
            <remarks>
            <c>fox => foxes</c>
            </remarks>
            <example>
            <code language="cs" title="Pluralise">
            <![CDATA[
            inflect.Pluralise("search").ShouldBe("searches");
            inflect.Pluralise("stack").ShouldBe("stacks");
            inflect.Pluralise("fish").ShouldBe("fish");
            ]]>
            </code>
            </example>
            <param name="word">The word to pluralise.</param>
            <returns>The pluralised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Singularise(System.String)">
            <summary>
            Singularises a word.
            </summary>
            <remarks>
            <c>foxes => fox</c>
            </remarks>
            <example>
            <code language="cs" title="Singularise">
            <![CDATA[
            inflect.Singularise("searches").ShouldBe("search");
            inflect.Singularise("stacks").ShouldBe("stack");
            inflect.Singularise("fish").ShouldBe("fish");
            ]]>
            </code>
            </example>
            <param name="word">The word to singularise.</param>
            <returns>The singularised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Titleise(System.String)">
            <summary>
            Titleises the word using a "Title Case" transformation.
            </summary>
            <remarks>
            <c>the_brown_fox => The Brown Fox</c>
            </remarks>
            <example>
            <code language="cs" title="Titleise">
            <![CDATA[
            inflect.Titleise("some title").ShouldBe("Some Title");
            inflect.Titleise("some-title").ShouldBe("Some Title");
            inflect.Titleise("sometitle").ShouldBe("Sometitle");
            inflect.Titleise("some_title:_the_beginning").ShouldBe("Some Title: The Beginning");
            ]]>
            </code>
            </example>
            <param name="word">The word to titleise.</param>
            <returns>The titleised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Humanise(System.String)">
            <summary>
            Humanises the word using "Sentence case" transformation.
            </summary>
            <remarks>
            <c>the_brown_fox => The brown fox</c>
            </remarks>
            <example>
            <code language="cs" title="Humanise">
            <![CDATA[
            inflect.Humanise("some_title").ShouldBe("Some title");
            inflect.Humanise("some-title").ShouldBe("Some-title");
            inflect.Humanise("Some_title").ShouldBe("Some title");
            inflect.Humanise("someTitle").ShouldBe("Sometitle");
            inflect.Humanise("someTitle_Another").ShouldBe("Sometitle another");
            ]]>
            </code>
            </example>
            <param name="lowercaseAndUnderscoredWord">The word to humanise.</param>
            <returns>The humanised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Pascalise(System.String)">
            <summary>
            Pascalises the word using a "PascalCase" transformation.
            </summary>
            <remarks>
            <c>the_brown_fox => TheBrownFox</c>
            </remarks>
            <example>
            <code language="cs" title="Pascalise">
            <![CDATA[
            inflect.Pascalise("customer").ShouldBe("Customer");
            inflect.Pascalise("customer_name").ShouldBe("CustomerName");
            inflect.Pascalise("customer name").ShouldBe("Customer name");
            ]]>
            </code>
            </example>
            <param name="lowercaseAndUnderscoredWord">The word to pascalise.</param>
            <returns>The pascalised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Camelise(System.String)">
            <summary>
            Camelises the word using a "camelCase" transformation.
            </summary>
            <remarks>
            <c>the_brown_fox => theBrownFox</c>
            </remarks>
            <example>
            <code language="cs" title="Camelise">
            <![CDATA[
            inflect.Camelise("Customer").ShouldBe("customer");
            inflect.Camelise("customer_name").ShouldBe("customerName");
            inflect.Camelise("customer_first_name").ShouldBe("customerFirstName");
            inflect.Camelise("customer name").ShouldBe("customer name");
            ]]>
            </code>
            </example>
            <param name="lowercaseAndUnderscoredWord">The word to camelise.</param>
            <returns>The camelised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Underscore(System.String)">
            <summary>
            Underscores and lowercases the word using a "snake_case" transformation.
            </summary>
            <remarks>
            <c>TheBrownFox => the_brown_fox</c>
            </remarks>
            <example>
            <code language="cs" title="Underscore">
            <![CDATA[
            inflect.Underscore("SomeTitle").ShouldBe("some_title");
            inflect.Underscore("someTitle").ShouldBe("some_title");
            inflect.Underscore("some title that will be underscored").ShouldBe("some_title_that_will_be_underscored");
            inflect.Underscore("SomeTitleThatWillBeUnderscored").ShouldBe("some_title_that_will_be_underscored");
            ]]>
            </code>
            </example>
            <param name="pascalCasedWord">The word to underscore.</param>
            <returns>The underscored word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Capitalise(System.String)">
            <summary>
            Capitalises the word using an "Initial upper case" transformation.
            </summary>
            <remarks>
            <c>the brown Fox => The brown fox</c>
            </remarks>
            <example>
            <code language="cs" title="Capitalise">
            <![CDATA[
            inflect.Capitalise("some title").ShouldBe("Some title");
            inflect.Capitalise("some Title").ShouldBe("Some title");
            inflect.Capitalise("SOMETITLE").ShouldBe("Sometitle");
            inflect.Capitalise("someTitle").ShouldBe("Sometitle");
            inflect.Capitalise("some title goes here").ShouldBe("Some title goes here");
            ]]>
            </code>
            </example>
            <param name="word">The word to capitalise.</param>
            <returns>The capitalised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Uncapitalise(System.String)">
            <summary>
            Uncapitalises the word using an "initial lower case" transformation.
            </summary>
            <remarks>
            <c>The brown Fox => the brown Fox</c>
            </remarks>
            <example>
            <code language="cs" title="Uncapitalise">
            <![CDATA[
            inflect.Uncapitalise("Some title").ShouldBe("some title");
            inflect.Uncapitalise("Some Title").ShouldBe("some Title");
            inflect.Uncapitalise("SOMETITLE").ShouldBe("sOMETITLE");
            inflect.Uncapitalise("someTitle").ShouldBe("someTitle");
            inflect.Uncapitalise("Some title goes here").ShouldBe("some title goes here");
            ]]>
            </code>
            </example>
            <param name="word">The word to uncapitalise.</param>
            <returns>The uncapitalised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Ordinalise(System.String)">
            <summary>
            Parses and Ordinalises the number string using a cardinal number (1,2,3...) to ordinal number (1st,2nd,3rd...) transformation.
            </summary>
            <remarks>
            <c>1 => 1st</c>, <c>2 => 2nd</c>, <c>3 => 3rd</c>...
            </remarks>
            <example>
            <code language="cs" title="Ordinalise">
            <![CDATA[
            inflect.Ordinalise(0).ShouldBe("0th");
            inflect.Ordinalise(1).ShouldBe("1st");
            inflect.Ordinalise(2).ShouldBe("2nd");
            inflect.Ordinalise(3).ShouldBe("3rd");
            inflect.Ordinalise(101).ShouldBe("101st");
            inflect.Ordinalise(104).ShouldBe("104th");
            inflect.Ordinalise(1000).ShouldBe("1000th");
            inflect.Ordinalise(1001).ShouldBe("1001st");
            ]]>
            </code>
            </example>
            <param name="number">The number to ordinalise.</param>
            <returns>The ordinalised number.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Ordinalise(System.Int32)">
            <summary>
            Ordinalises the number using a cardinal number (1,2,3...) to ordinal number (1st,2nd,3rd...) transformation.
            </summary>
            <remarks>
            <c>1 => 1st</c>, <c>2 => 2nd</c>, <c>3 => 3rd</c>...
            </remarks>
            <example>
            <code language="cs" title="Ordinalise">
            <![CDATA[
            inflect.Ordinalise("0").ShouldBe("0th");
            inflect.Ordinalise("1").ShouldBe("1st");
            inflect.Ordinalise("2").ShouldBe("2nd");
            inflect.Ordinalise("3").ShouldBe("3rd");
            inflect.Ordinalise("100").ShouldBe("100th");
            inflect.Ordinalise("101").ShouldBe("101st");
            inflect.Ordinalise("1000").ShouldBe("1000th");
            inflect.Ordinalise("1001").ShouldBe("1001st");
            ]]>
            </code>
            </example>
            <param name="number">The number to ordinalise.</param>
            <returns>The ordinalised number.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Dasherise(System.String)">
            <summary>
            Dasherises the word using a "kebob-case" transformation.
            </summary>
            <remarks>
            <c>the_brown_fox => the-brown-fox</c>
            </remarks>
            <example>
            <code language="cs" title="Dasherise">
            <![CDATA[
            inflect.Dasherise("some_title").ShouldBe("some-title");
            inflect.Dasherise("some-title").ShouldBe("some-title");
            inflect.Dasherise("some_title_goes_here").ShouldBe("some-title-goes-here");
            inflect.Dasherise("some_title and_another").ShouldBe("some-title and-another");
            ]]>
            </code>
            </example>
            <param name="underscoredWord">The word to dasherise.</param>
            <returns>The dasherised word.</returns>
        </member>
        <member name="T:PetaPoco.Core.Inflection.Inflector">
            <summary>
            Static inflection singleton helper.
            </summary>
        </member>
        <member name="P:PetaPoco.Core.Inflection.Inflector.Instance">
            <summary>
            Gets or sets the <see cref="T:PetaPoco.Core.Inflection.IInflector"/> instance.
            Default is <see cref="T:PetaPoco.Core.Inflection.EnglishInflector"/>.
            </summary>
            <remarks>
            Set to <see langword="null"/> to restore the default <see cref="T:PetaPoco.Core.Inflection.EnglishInflector"/>.
            </remarks>
            <value>The currently set <see cref="T:PetaPoco.Core.Inflection.IInflector"/> instance.</value>
            <seealso cref="T:PetaPoco.Core.Inflection.EnglishInflector"/>
        </member>
        <member name="T:PetaPoco.Core.IProvider">
            <summary>
            Defines the contract for database providers that expose functionality for connecting to various types of databases.
            </summary>
        </member>
        <member name="P:PetaPoco.Core.IProvider.PagingUtility">
            <summary>
            Gets the <see cref="T:PetaPoco.Utilities.IPagingHelper"/> supplied by this provider.
            </summary>
        </member>
        <member name="P:PetaPoco.Core.IProvider.HasNativeGuidSupport">
            <summary>
            Gets a flag indicating whether the DB has native support for GUID/UUID.
            </summary>
        </member>
        <member name="M:PetaPoco.Core.IProvider.EscapeTableName(System.String)">
            <summary>
            Escapes a table name into a suitable format for the associated database provider.
            </summary>
            <param name="tableName">The name of the table as specified by the client program, or as attributes on the associated POCO
            class.</param>
            <returns>The escaped table name.</returns>
        </member>
        <member name="M:PetaPoco.Core.IProvider.EscapeSqlIdentifier(System.String)">
            <summary>
            Escapes an arbitrary SQL identifier into a format suitable for the associated database provider.
            </summary>
            <param name="sqlIdentifier">The SQL identifier to be escaped.</param>
            <returns>The escaped identifier.</returns>
        </member>
        <member name="M:PetaPoco.Core.IProvider.BuildPageQuery(System.Int64,System.Int64,PetaPoco.Utilities.SQLParts,System.Object[]@)">
            <summary>
            Builds an SQL query suitable for performing page-based queries to the database.
            </summary>
            <param name="skip">The number of records to skip.</param>
            <param name="take">The number of records to take.</param>
            <param name="parts">The parsed SQL query parts.</param>
            <param name="args">The arguments to any embedded parameters in the SQL query.</param>
            <returns>The final SQL query to be executed.</returns>
        </member>
        <member name="M:PetaPoco.Core.IProvider.MapParameterValue(System.Object)">
            <summary>
            Converts the specified C# object value into a data type suitable for passing to the database.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PetaPoco.Core.IProvider.PreExecute(System.Data.IDbCommand)">
            <summary>
            Called immediately before an SQL command is executed, allowing for modification of the command before being passed to the
            database provider.
            </summary>
            <param name="cmd">The SQL command to be executed.</param>
        </member>
        <member name="M:PetaPoco.Core.IProvider.GetExistsSql">
            <summary>
            Returns an SQL statement that can check for the existence of a row in the database.
            </summary>
            <returns>The SQL statement.</returns>
        </member>
        <member name="M:PetaPoco.Core.IProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
            <summary>
            Performs an Insert operation.
            </summary>
            <param name="db">The database instance that will execute the SQL command.</param>
            <param name="cmd">The SQL command to be executed.</param>
            <param name="primaryKeyName">The primary key column name for the table being inserted into.</param>
            <returns>The ID of the newly inserted record.</returns>
        </member>
        <member name="M:PetaPoco.Core.IProvider.GetInsertOutputClause(System.String)">
            <summary>
            Returns an SQL expression that can be used to specify the return value of auto-incremented columns.
            </summary>
            <remarks>
            See the SQLServer database provider for an example of how this method is used.
            </remarks>
            <param name="primaryKeyName">The primary key column name of the row being inserted.</param>
            <returns>An expression describing how to return the new primary key value.</returns>
        </member>
        <member name="M:PetaPoco.Core.IProvider.GetParameterPrefix(System.String)">
            <summary>
            Returns the prefix used to delimit parameters in SQL query strings.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>The provider's character for prefixing a query parameter.</returns>
        </member>
        <member name="M:PetaPoco.Core.IProvider.GetAutoIncrementExpression(PetaPoco.TableInfo)">
            <summary>
            Returns an SQL expression that can be used to populate the primary key column of an auto-increment column.
            </summary>
            <remarks>
            See the Oracle database type for an example of how this method is used.
            </remarks>
            <param name="tableInfo">The TableInfo instance describing the table.</param>
            <returns>An SQL expression.</returns>
        </member>
        <member name="M:PetaPoco.Core.IProvider.GetFactory">
            <summary>
            Returns the DbProviderFactory.
            </summary>
            <returns>The DbProviderFactory factory.</returns>
        </member>
        <member name="T:PetaPoco.Core.PocoColumn">
            <summary>
            Represents a property defined in a POCO object which is mapped to a column in that POCO's corresponding table.
            </summary>
        </member>
        <member name="P:PetaPoco.Core.PocoColumn.ColumnName">
            <inheritdoc cref="P:PetaPoco.ColumnInfo.ColumnName"/>
        </member>
        <member name="P:PetaPoco.Core.PocoColumn.ResultColumn">
            <inheritdoc cref="P:PetaPoco.ColumnInfo.ResultColumn"/>
        </member>
        <member name="P:PetaPoco.Core.PocoColumn.AutoSelectedResultColumn">
            <inheritdoc cref="P:PetaPoco.ColumnInfo.AutoSelectedResultColumn"/>
        </member>
        <member name="P:PetaPoco.Core.PocoColumn.ForceToAnsiString">
            <inheritdoc cref="P:PetaPoco.ColumnInfo.ForceToAnsiString"/>
        </member>
        <member name="P:PetaPoco.Core.PocoColumn.ForceToDateTime2">
            <inheritdoc cref="P:PetaPoco.ColumnInfo.ForceToDateTime2"/>
        </member>
        <member name="P:PetaPoco.Core.PocoColumn.ForceToUtc">
            <inheritdoc cref="P:PetaPoco.ColumnInfo.ForceToUtc"/>
        </member>
        <member name="P:PetaPoco.Core.PocoColumn.InsertTemplate">
            <inheritdoc cref="P:PetaPoco.ColumnInfo.InsertTemplate"/>
        </member>
        <member name="P:PetaPoco.Core.PocoColumn.UpdateTemplate">
            <inheritdoc cref="P:PetaPoco.ColumnInfo.UpdateTemplate"/>
        </member>
        <member name="P:PetaPoco.Core.PocoColumn.PropertyInfo">
            <summary>
            Gets or sets the property info for the column-mapped property.
            </summary>
        </member>
        <member name="M:PetaPoco.Core.PocoColumn.SetValue(System.Object,System.Object)">
            <inheritdoc cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.Core.PocoColumn.GetValue(System.Object)">
            <inheritdoc cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.Core.PocoColumn.ChangeType(System.Object)">
            <inheritdoc cref="M:System.Convert.ChangeType(System.Object,System.Type)"/>
        </member>
        <member name="T:PetaPoco.Core.PocoData">
            <summary>
            Represents the core data structure for PetaPoco's database operations.
            </summary>
        </member>
        <member name="P:PetaPoco.Core.PocoData.Type">
            <summary>
            Gets or sets the type of the POCO class represented by the PocoData instance.
            </summary>
        </member>
        <member name="P:PetaPoco.Core.PocoData.QueryColumns">
            <summary>
            Gets the array of all queryable database column names used by auto-select for query operations when <see
            cref="P:PetaPoco.IDatabase.EnableAutoSelect"/> is enabled.
            </summary>
            <remarks>
            Column names are returned unescaped. Escaping should be applied based on the configured <see cref="P:PetaPoco.IDatabase.Provider"/> if
            accessing this list to construct an SQL query. To access all
            <para>Excluded columns include: columns decorated with the <see cref="T:PetaPoco.IgnoreAttribute"/>, unannotated columns in a POCO marked
            with the <see cref="T:PetaPoco.ExplicitColumnsAttribute"/>, and any <see cref="P:PetaPoco.ColumnInfo.ResultColumn"/> that has opted out of auto-select
            by setting <see cref="P:PetaPoco.ResultColumnAttribute.IncludeInAutoSelect"/> to <see cref="F:PetaPoco.IncludeInAutoSelect.No"/> or through the <see
            cref="P:PetaPoco.ColumnInfo.AutoSelectedResultColumn"/> property.</para>
            </remarks>
        </member>
        <member name="P:PetaPoco.Core.PocoData.UpdateColumns">
            <summary>
            Gets the array of column names used for update operations, excluding result columns and the primary key.
            </summary>
        </member>
        <member name="P:PetaPoco.Core.PocoData.TableInfo">
            <summary>
            Gets the metadata about the database table associated with the POCO class.
            </summary>
        </member>
        <member name="P:PetaPoco.Core.PocoData.Columns">
            <summary>
            Gets the dictionary of PocoColumn objects, containing column metadata for the database table mapped to the POCO class.
            </summary>
        </member>
        <member name="M:PetaPoco.Core.PocoData.#ctor">
            <summary>
            Initializes a new instance of the PocoData class with default values.
            </summary>
        </member>
        <member name="M:PetaPoco.Core.PocoData.#ctor(System.Type,PetaPoco.IMapper)">
            <summary>
            Initializes a new instance of the PocoData class with the specified type and mapper.
            </summary>
            <param name="type">The type of the POCO class.</param>
            <param name="defaultMapper">The default mapper to use for the POCO type.</param>
        </member>
        <member name="M:PetaPoco.Core.PocoData.ForType(System.Type,PetaPoco.IMapper)">
            <summary>
            Creates a new PocoData instance for the specified class type and mapper.
            </summary>
            <param name="type">The type to create a PocoData instance for.</param>
            <param name="defaultMapper">The default mapper to use for the type.</param>
            <returns>A new PocoData instance for the specified type.</returns>
            <exception cref="T:System.InvalidOperationException">Trying to use dynamic types with this method.</exception>
        </member>
        <member name="M:PetaPoco.Core.PocoData.ForObject(System.Object,System.String,PetaPoco.IMapper)">
            <summary>
            Creates a new PocoData instance for the specified object, specifically a <see cref="T:System.Dynamic.ExpandoObject"/>.
            </summary>
            <param name="obj">The object to create a PocoData instance for.</param>
            <param name="primaryKeyName">The name of the primary key for the object.</param>
            <param name="defaultMapper">The default mapper to use for the object.</param>
            <returns>A new PocoData instance for the specified object.</returns>
        </member>
        <member name="M:PetaPoco.Core.PocoData.GetFactory(System.String,System.String,System.Int32,System.Int32,System.Data.IDataReader,PetaPoco.IMapper)">
            <summary>
            Creates a factory function to generate and cache a POCO from a data reader record at runtime. Subsequent reads attempt to locate
            the object in the <see cref="T:PetaPoco.Internal.Cache`2"/> for performance gains.
            </summary>
            <param name="sql">The SQL statement.</param>
            <param name="connectionString">The connection string.</param>
            <param name="firstColumn">The index of the first column in the record's database table.</param>
            <param name="columnCount">The number of columns in the record's database table.</param>
            <param name="reader">The data reader instance.</param>
            <param name="defaultMapper">The default mapper to use for the POCO.</param>
            <returns>A delegate that can convert an <see cref="T:System.Data.IDataReader"/> record into a POCO.</returns>
            <exception cref="T:System.InvalidOperationException">The POCO type is a value type, or the POCO type has no default constructor, or the
            POCO type is an interface or abstract class.</exception>
        </member>
        <member name="M:PetaPoco.Core.PocoData.FlushCaches">
            <summary>
            Clears all cached PocoData instances.
            </summary>
            <remarks>
            Call if you have modified a POCO class and need to reset PetaPoco's internal cache.
            </remarks>
        </member>
        <member name="M:PetaPoco.Core.PocoData.GetColumnName(System.String)">
            <summary>
            Gets the column name that is mapped to the given property name using a string comparison.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>The column name that maps to the given property name.</returns>
            <exception cref="T:System.ArgumentNullException">No mapped column exists for <paramref name="propertyName"/>.</exception>
        </member>
        <member name="T:PetaPoco.DateTime2">
            <summary>
            Wraps a <see cref="T:System.DateTime"/> that will be stored in the database as a <see cref="F:System.Data.DbType.DateTime2"/>.
            </summary>
            <remarks>
            Using this type for a column-mapped POCO property is equivalent to decorating a DateTime property with <see
            cref="P:PetaPoco.ColumnAttribute.ForceToDateTime2"/>.
            <para><see cref="F:System.Data.DbType.DateTime2">DbType.DateTime2</see> is a data type used by SQL DBs with a larger date range and
            fractional second precision than <see cref="F:System.Data.DbType.DateTime">DbType.DateTime</see>.</para>
            </remarks>
        </member>
        <member name="P:PetaPoco.DateTime2.Value">
            <summary>
            Gets the <see cref="T:System.DateTime"/> value wrapped by this instance.
            </summary>
        </member>
        <member name="M:PetaPoco.DateTime2.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the DateTime2 class with the specified <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The DateTime to be stored in the database as a <see cref="F:System.Data.DbType.DateTime2"/>.</param>
        </member>
        <member name="M:PetaPoco.DateTime2.op_Explicit(System.DateTime)~PetaPoco.DateTime2">
            <summary>
            Explicitly converts a <see cref="T:System.DateTime"/> to a <see cref="T:PetaPoco.DateTime2"/> instance.
            </summary>
            <param name="value">The DateTime value to convert.</param>
            <returns>A DateTime2 instance containing the wrapped <see cref="T:System.DateTime"/> value.</returns>
        </member>
        <member name="T:PetaPoco.DateTime2Extensions">
            <summary>
            Provides extension methods for the <see cref="T:PetaPoco.DateTime2"/> class.
            </summary>
        </member>
        <member name="M:PetaPoco.DateTime2Extensions.ToDateTime2(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to its <see cref="T:PetaPoco.DateTime2"/> representation.
            </summary>
            <param name="value">The DateTime object to be converted.</param>
            <returns>A <see cref="T:PetaPoco.DateTime2"/> object containing the converted <paramref name="value"/>.</returns>
        </member>
        <member name="M:PetaPoco.DateTime2Extensions.ToDateTime2(System.String)">
            <summary>
            Parses a string to its <see cref="T:PetaPoco.DateTime2"/> representation.
            </summary>
            <param name="value">The string representing a date and time to be converted.</param>
            <returns>A <see cref="T:PetaPoco.DateTime2"/> object containing the parsed <paramref name="value"/>.</returns>
            <inheritdoc cref="M:System.DateTime.Parse(System.String)"/>
        </member>
        <member name="T:PetaPoco.Internal.ParametersHelper">
            <summary>
            Provides static utility methods and extensions for handling SQL parameters.
            </summary>
            <remarks>
            This class includes extensions for validating and replacing parameter prefixes, as well as static methods used for processing
            parameters for queries and stored procedures.
            </remarks>
        </member>
        <member name="M:PetaPoco.Internal.ParametersHelper.ReplaceParamPrefix(System.String,System.String)">
            <summary>
            Replaces all parameter prefixes in the provided SQL statement with the specified replacement string.
            </summary>
            <param name="sql">The SQL statement.</param>
            <param name="replacementPrefix">The replacement parameter prefix.</param>
            <returns>The SQL statement with the parameter prefixes replaced.</returns>
        </member>
        <member name="M:PetaPoco.Internal.ParametersHelper.EnsureParamPrefix(System.Int32,System.String)">
            <summary>
            Ensures that the provided SQL parameter number is prefixed with the specified prefix string.
            </summary>
            <param name="value">The parameter number.</param>
            <param name="paramPrefix">The prefix string.</param>
            <returns>The parameter number, converted to a string and appended to the specified prefix.</returns>
        </member>
        <member name="M:PetaPoco.Internal.ParametersHelper.EnsureParamPrefix(System.String,System.String)">
            <summary>
            Ensures that the provided SQL parameter string is prefixed with the specified prefix string.
            </summary>
            <param name="value">The parameter name.</param>
            <param name="paramPrefix">The prefix string.</param>
            <returns>The parameter name appended to the specified prefix string.</returns>
        </member>
        <member name="M:PetaPoco.Internal.ParametersHelper.ProcessQueryParams(System.String,System.Object[],System.Collections.Generic.List{System.Object})">
            <summary>
            Processes the parameters for an SQL statement.
            </summary>
            <remarks>
            Helper method for processing named parameters from object properties.
            </remarks>
            <param name="sql">The SQL statement.</param>
            <param name="srcArgs">The source arguments to be processed.</param>
            <param name="destArgs">The destination list to store the processed arguments.</param>
            <returns>The SQL statement with the parameters processed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of parameters is less than the count of numbered parameters in the SQL
            string.</exception>
            <exception cref="T:System.ArgumentException">None of the passed parameters have a property with the name used as a named
            parameter.</exception>
        </member>
        <member name="M:PetaPoco.Internal.ParametersHelper.ProcessStoredProcParams(System.Data.IDbCommand,System.Object[],System.Action{System.Data.IDbDataParameter,System.Object,PetaPoco.Core.PocoColumn})">
            <summary>
            Processes the parameters for a stored procedure command.
            </summary>
            <param name="cmd">The SQL command representing the stored procedure.</param>
            <param name="args">The arguments to be processed.</param>
            <param name="setPropertiesAction">An action used to set the database parameter properties.</param>
            <returns>An array of database parameters processed from the input arguments.</returns>
            <exception cref="T:System.ArgumentException">Value type or string passed as stored procedure argument.</exception>
        </member>
        <member name="T:PetaPoco.GridReader">
            <summary>
            Provides methods for reading a result set from a database query into an enumerable collection of single or multi-POCO objects.
            </summary>
        </member>
        <member name="M:PetaPoco.GridReader.#ctor(PetaPoco.Database,System.Data.IDbCommand,System.Data.IDataReader,PetaPoco.IMapper)">
            <summary>
            Initializes a new instance of the GridReader class with the control structure for a multi-poco query result set.
            </summary>
            <param name="database">The database instance this GridReader is associated with.</param>
            <param name="command">The database query command to execute.</param>
            <param name="reader">The underlying data reader for reading the result sets.</param>
            <param name="defaultMapper">The default mapper to be used for mapping the result sets to POCOs.</param>
        </member>
        <member name="M:PetaPoco.GridReader.Read``1">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.GridReader.Read``2">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.GridReader.Read``3">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.GridReader.Read``4">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.GridReader.Read``3(System.Func{``0,``1,``2})">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.GridReader.Read``4(System.Func{``0,``1,``2,``3})">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4})">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.GridReader.SinglePocoFromIDataReader``1(System.Int32)">
            <summary>
            Reads data to a single POCO.
            </summary>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="index">The zero-based row index to be read from the underlying <see cref="T:System.Data.IDataReader"/>.</param>
            <returns>A POCO of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">Called after the data reader has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Result records are consumed in the incorrect order, or more than once.</exception>
        </member>
        <member name="M:PetaPoco.GridReader.MultiPocoFromIDataReader``1(System.Int32,System.Type[],System.Object)">
            <summary>
            Reads data to multiple POCOs.
            </summary>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="index">The zero-based row index to be read from the underlying <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="types">An array of types representing the POCO types in the returned result set.</param>
            <param name="transformer">A function used to connect the POCO instances as a single POCO of type <typeparamref name="T"/>, or
            <see langword="null"/> to let PetaPoco automatically deduce the relationships.</param>
            <returns>A composite POCO of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">Called after the data reader has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Result records are consumed in the incorrect order, or more than once.</exception>
        </member>
        <member name="M:PetaPoco.GridReader.NextResult">
            <summary>
            Advances the <see cref="T:System.Data.IDataReader"/> to the <see cref="M:System.Data.IDataReader.NextResult"/>, if one exists.
            </summary>
        </member>
        <member name="M:PetaPoco.GridReader.Dispose">
            <summary>
            Disposes the GridReader, closing and releasing the underlying <see cref="T:System.Data.IDataReader"/>, <see cref="T:System.Data.IDbCommand"/>, and shared
            <see cref="P:PetaPoco.IConnection.Connection"/>.
            </summary>
        </member>
        <member name="T:PetaPoco.IGridReader">
            <summary>
            Specifies a set of methods for reading a result set from a database query into a sequence of single or multi-POCO objects.
            </summary>
        </member>
        <member name="M:PetaPoco.IGridReader.Read``1">
            <summary>
            Reads a sequence of results from a data reader.
            </summary>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <returns>An enumerable sequence of results of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:PetaPoco.IGridReader.Read``2">
            <inheritdoc cref="M:PetaPoco.IGridReader.Read``4"/>
        </member>
        <member name="M:PetaPoco.IGridReader.Read``3">
            <inheritdoc cref="M:PetaPoco.IGridReader.Read``4"/>
        </member>
        <member name="M:PetaPoco.IGridReader.Read``4">
            <summary>
            Reads a sequence of results from a data reader and projects them into a new form of type <typeparamref name="T1"/> using a
            default mapping function.
            </summary>
            <remarks>
            PetaPoco will automatically attempt to determine the split points and auto-map any additional POCO types into <typeparamref
            name="T1"/>.
            </remarks>
            <typeparam name="T1">The first POCO type, and the projected POCO type representing a single composite result record.</typeparam>
            <typeparam name="T2">The second POCO type.</typeparam>
            <typeparam name="T3">The third POCO type.</typeparam>
            <typeparam name="T4">The fourth POCO type.</typeparam>
            <returns>An enumerable sequence of results of type <typeparamref name="T1"/>.</returns>
        </member>
        <member name="M:PetaPoco.IGridReader.Read``3(System.Func{``0,``1,``2})">
            <inheritdoc cref="M:PetaPoco.IGridReader.Read``5(System.Func{``0,``1,``2,``3,``4})"/>
        </member>
        <member name="M:PetaPoco.IGridReader.Read``4(System.Func{``0,``1,``2,``3})">
            <inheritdoc cref="M:PetaPoco.IGridReader.Read``5(System.Func{``0,``1,``2,``3,``4})"/>
        </member>
        <member name="M:PetaPoco.IGridReader.Read``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Reads a sequence of results from a data reader and projects them into a new form of type <typeparamref name="TResult"/> using
            the provided mapping function.
            </summary>
            <remarks>
            If <paramref name="projector"/> is <see langword="null"/>, PetaPoco will automatically attempt to determine the split points and
            auto-map each POCO type into <typeparamref name="TResult"/>.
            </remarks>
            <typeparam name="T1">The first POCO type.</typeparam>
            <typeparam name="T2">The second POCO type.</typeparam>
            <typeparam name="T3">The third POCO type.</typeparam>
            <typeparam name="T4">The fourth POCO type.</typeparam>
            <typeparam name="TResult">The projected POCO type representing a single result record.</typeparam>
            <param name="projector">A function that transforms each of the given types into a <typeparamref name="TResult"/>.</param>
            <returns>An enumerable sequence of results of type <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="T:PetaPoco.IMapper">
            <summary>
            Provides a way to hook into PetaPoco's DB-to-POCO mapping mechanism to either customise or completely replace it.
            </summary>
            <remarks>
            To use this functionality, instantiate a class that implements IMapper and then register it using one of the <see cref="T:PetaPoco.Mappers"/>
            static register methods.
            </remarks>
            <seealso cref="M:PetaPoco.Mappers.Register(System.Reflection.Assembly,PetaPoco.IMapper)"/>
            <seealso cref="M:PetaPoco.Mappers.Register(System.Type,PetaPoco.IMapper)"/>
        </member>
        <member name="M:PetaPoco.IMapper.GetTableInfo(System.Type)">
            <summary>
            Returns information about the table associated with a POCO class.
            </summary>
            <remarks>
            This method must return a valid <see cref="T:PetaPoco.TableInfo"/>. To create a TableInfo from a POCO's attributes, use <see
            cref="M:PetaPoco.TableInfo.FromPoco(System.Type)"/>.
            </remarks>
            <param name="pocoType">The POCO type representing a single result record in the associated database table.</param>
            <returns>A TableInfo instance.</returns>
        </member>
        <member name="M:PetaPoco.IMapper.GetColumnInfo(System.Reflection.PropertyInfo)">
            <summary>
            Returns a <see cref="T:PetaPoco.ColumnInfo"/> object containing information about the column associated with a property of a POCO.
            </summary>
            <remarks>
            To create a ColumnInfo from a property's attributes, use <see cref="M:PetaPoco.ColumnInfo.FromProperty(System.Reflection.PropertyInfo)"/>
            </remarks>
            <param name="pocoProperty">The PropertyInfo for the property that maps to the associated database column.</param>
            <returns>A ColumnInfo instance, or <see langword="null"/> if the property should be ignored.</returns>
        </member>
        <member name="M:PetaPoco.IMapper.GetFromDbConverter(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Supplies a function to convert a database value to the correct property value.
            </summary>
            <param name="targetProperty">The target property.</param>
            <param name="sourceType">The data type returned by the database.</param>
            <returns>A function to perform the conversion, or <see langword="null"/> if no conversion is needed.</returns>
        </member>
        <member name="M:PetaPoco.IMapper.GetToDbConverter(System.Reflection.PropertyInfo)">
            <summary>
            Supplies a function to convert a property value to the correct database value.
            </summary>
            <remarks>
            This conversion is only used for converting values from POCOs that are being Inserted or Updated. Conversion is not available
            for parameter values passed directly to queries.
            </remarks>
            <param name="sourceProperty">The property to be converted.</param>
            <returns>A function to perform the conversion, or <see langword="null"/> if no conversion is needed.</returns>
        </member>
        <member name="T:PetaPoco.ITransaction">
            <summary>
            Represents the contract for the transaction.
            </summary>
            <remarks>
            A PetaPoco helper to support transactions inside the using block syntax.
            </remarks>
        </member>
        <member name="M:PetaPoco.ITransaction.Complete">
            <summary>
            Completes the transaction.
            </summary>
        </member>
        <member name="T:PetaPoco.Mappers">
            <summary>
            This static class manages registration of IMapper instances with PetaPoco.
            </summary>
        </member>
        <member name="M:PetaPoco.Mappers.Register(System.Reflection.Assembly,PetaPoco.IMapper)">
            <summary>
            Registers a mapper for all types in the specified assembly.
            </summary>
            <param name="assembly">The assembly whose types are to be managed by this mapper.</param>
            <param name="mapper">The mapper to register.</param>
        </member>
        <member name="M:PetaPoco.Mappers.Register(System.Type,PetaPoco.IMapper)">
            <summary>
            Registers a mapper for a single POCO type.
            </summary>
            <param name="type">The type to be managed by this mapper.</param>
            <param name="mapper">The mapper to register.</param>
        </member>
        <member name="M:PetaPoco.Mappers.Revoke(System.Reflection.Assembly)">
            <summary>
            Revokes all mappers for all types in the specified assembly.
            </summary>
            <param name="assembly">The assembly containing the mappers to be revoked.</param>
        </member>
        <member name="M:PetaPoco.Mappers.Revoke(System.Type)">
            <summary>
            Revokes a mapper for the specified POCO type.
            </summary>
            <param name="type">The type of the mapper to be revoked.</param>
        </member>
        <member name="M:PetaPoco.Mappers.Revoke(PetaPoco.IMapper)">
            <summary>
            Revokes the specified mapper instance.
            </summary>
            <param name="mapper">The IMapper to be revoked.</param>
        </member>
        <member name="M:PetaPoco.Mappers.RevokeAll">
            <summary>
            Revokes all registered mappers.
            </summary>
        </member>
        <member name="M:PetaPoco.Mappers.GetMapper(System.Type,PetaPoco.IMapper)">
            <summary>
            Retrieves the IMapper implementation to be used for a specified POCO type.
            </summary>
            <param name="entityType">The entity type to get the mapper for.</param>
            <param name="defaultMapper">The default mapper to use when none is registered for the type.</param>
            <returns>The mapper for the given type.</returns>
        </member>
        <member name="T:PetaPoco.Page`1">
            <summary>
            Provides access to the result collection from a paged request.
            </summary>
            <remarks>
            Represents a paged result set, both providing access to the items on the current page and maintaining state information about the
            pagination for additional queries.
            </remarks>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
        </member>
        <member name="P:PetaPoco.Page`1.CurrentPage">
            <summary>
            Gets or sets the number of the current page in the result set.
            </summary>
        </member>
        <member name="P:PetaPoco.Page`1.TotalPages">
            <summary>
            Gets or sets the total number of pages in the full result set.
            </summary>
        </member>
        <member name="P:PetaPoco.Page`1.TotalItems">
            <summary>
            Gets or sets the total number of records in the full result set.
            </summary>
        </member>
        <member name="P:PetaPoco.Page`1.ItemsPerPage">
            <summary>
            Gets or sets the number of items per page.
            </summary>
        </member>
        <member name="P:PetaPoco.Page`1.Items">
            <summary>
            Gets or sets the result records on the current page.
            </summary>
        </member>
        <member name="P:PetaPoco.Page`1.Context">
            <summary>
            Gets or sets a context object, which can be used to store additional information about the result set.
            </summary>
        </member>
        <member name="T:PetaPoco.Sql">
            <summary>
            A simple helper class for building mutable SQL statements.
            </summary>
        </member>
        <member name="P:PetaPoco.Sql.Builder">
            <summary>
            Gets a new initialized instance of the <see cref="T:PetaPoco.Sql"/> builder class.
            </summary>
            <remarks>
            Weirdly implemented as a property, but makes for more elegant and readable fluent-style construction of SQL Statements:
            <br/><c>db.Query(Sql.Builder.Append(/*...*/));</c>.
            </remarks>
        </member>
        <member name="P:PetaPoco.Sql.SQL">
            <summary>
            Gets the final SQL statement stored in this builder.
            </summary>
        </member>
        <member name="P:PetaPoco.Sql.Arguments">
            <summary>
            Gets the complete, final array of arguments collected by this builder.
            </summary>
        </member>
        <member name="M:PetaPoco.Sql.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:PetaPoco.Sql"/> builder class with default values.
            </summary>
        </member>
        <member name="M:PetaPoco.Sql.#ctor(System.String,System.Object[])">
            <summary>
            Construct an SQL statement from the given SQL string and arguments.
            </summary>
            <param name="sql">The SQL clause or statement.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
        </member>
        <member name="M:PetaPoco.Sql.Append(PetaPoco.Sql)">
            <summary>
            Appends another Sql builder instance to the right-hand-side of this Sql builder.
            </summary>
            <param name="sql">An SQL builder instance.</param>
            <returns>This Sql builder instance, allowing for fluent style concatenation.</returns>
        </member>
        <member name="M:PetaPoco.Sql.Append(System.String,System.Object[])">
            <summary>
            Appends an SQL fragment to the right-hand-side of this Sql builder instance.
            </summary>
            <param name="sql">The SQL clause or statement.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>This Sql builder instance, allowing for fluent style concatenation.</returns>
        </member>
        <member name="M:PetaPoco.Sql.Set(System.String,System.Object[])">
            <summary>
            Appends a <c>SET</c> clause to this Sql builder.
            </summary>
            <param name="sql">The SQL string representing the assignment portion of the SET clause: <c>{field} = {value}</c>.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>This Sql builder instance, allowing for fluent style concatenation.</returns>
        </member>
        <member name="M:PetaPoco.Sql.Where(System.String,System.Object[])">
            <summary>
            Appends a <c>WHERE</c> clause to this Sql builder.
            </summary>
            <param name="sql">The SQL string representing the condition portion of the WHERE clause: <c>{field} = {value}</c>.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>This Sql builder instance, allowing for fluent style concatenation.</returns>
        </member>
        <member name="M:PetaPoco.Sql.OrderBy(System.Object[])">
            <summary>
            Appends an <c>ORDER BY</c> clause to this Sql builder.
            </summary>
            <param name="columns">The column names to order by.</param>
            <returns>This Sql builder instance, allowing for fluent style concatenation.</returns>
        </member>
        <member name="M:PetaPoco.Sql.Select(System.Object[])">
            <summary>
            Appends a <c>SELECT</c> clause to this Sql builder.
            </summary>
            <param name="columns">The column names to include in the SELECT clause.</param>
            <returns>This Sql builder instance, allowing for fluent style concatenation.</returns>
        </member>
        <member name="M:PetaPoco.Sql.From(System.Object[])">
            <summary>
            Appends a <c>FROM</c> clause to this Sql builder.
            </summary>
            <param name="tables">The table names to include in the FROM clause.</param>
            <returns>This Sql builder instance, allowing for fluent style concatenation.</returns>
        </member>
        <member name="M:PetaPoco.Sql.GroupBy(System.Object[])">
            <summary>
            Appends a <c>GROUP BY</c> clause to this Sql builder.
            </summary>
            <param name="columns">The column names to group by.</param>
            <returns>This Sql builder instance, allowing for fluent style concatenation.</returns>
        </member>
        <member name="M:PetaPoco.Sql.InnerJoin(System.String)">
            <summary>
            Appends an <c>INNER JOIN</c> clause to this Sql builder.
            </summary>
            <param name="tableName">The name of the table to join.</param>
            <returns>An SqlJoinClause instance, to be used to append the JOIN conditions.</returns>
        </member>
        <member name="M:PetaPoco.Sql.LeftJoin(System.String)">
            <summary>
            Appends a <c>LEFT JOIN</c> clause to this Sql builder.
            </summary>
            <param name="tableName">The name of the table to join.</param>
            <returns>An SqlJoinClause instance, to be used to append the JOIN conditions.</returns>
        </member>
        <member name="M:PetaPoco.Sql.ToString">
            <summary>
            Returns the complete SQL statement represented by this builder.
            </summary>
            <returns>The complete SQL statement.</returns>
        </member>
        <member name="T:PetaPoco.Sql.SqlJoinClause">
            <summary>
            The SqlJoinClause is a simple <see cref="T:PetaPoco.Sql"/> builder helper class used to build <c>JOIN</c> clauses.
            </summary>
        </member>
        <member name="M:PetaPoco.Sql.SqlJoinClause.#ctor(PetaPoco.Sql)">
            <summary>
            Creates a new <see cref="T:PetaPoco.Sql.SqlJoinClause"/> instance from the specified <see cref="T:PetaPoco.Sql"/> builder.
            </summary>
            <param name="sql">An SQL builder instance.</param>
        </member>
        <member name="M:PetaPoco.Sql.SqlJoinClause.On(System.String,System.Object[])">
            <summary>
            Appends an <c>ON</c> expression to the <c>JOIN</c> clause.
            </summary>
            <param name="onClause">The SQL expression defining the ON condition for the JOIN clause: <c>{table1}.{column1} =
            {table2}.{column2}</c>.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>The parent Sql builder, allowing for fluent style concatenation.</returns>
        </member>
        <member name="T:PetaPoco.StandardMapper">
            <summary>
            This is the original default implementation of <see cref="T:PetaPoco.IMapper"/> used by PetaPoco.
            </summary>
            <remarks>
            PetaPoco now ships with an improved <see cref="T:PetaPoco.ConventionMapper"/> as the default mapper.
            </remarks>
        </member>
        <member name="M:PetaPoco.StandardMapper.GetTableInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.StandardMapper.GetColumnInfo(System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.StandardMapper.GetFromDbConverter(System.Reflection.PropertyInfo,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.StandardMapper.GetToDbConverter(System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="T:PetaPoco.TableInfo">
            <summary>
            A class used by <see cref="T:PetaPoco.IMapper"/> to override table bindings for a POCO object.
            </summary>
        </member>
        <member name="P:PetaPoco.TableInfo.TableName">
            <summary>
            Gets or sets the database table name.
            </summary>
        </member>
        <member name="P:PetaPoco.TableInfo.PrimaryKey">
            <summary>
            Gets or sets the name of the table's primary key column.
            </summary>
        </member>
        <member name="P:PetaPoco.TableInfo.AutoIncrement">
            <summary>
            Gets or sets whether the primary key column is auto-incrementing.
            </summary>
        </member>
        <member name="P:PetaPoco.TableInfo.SequenceName">
            <summary>
            Gets or sets the name of the sequence used for auto-incrementing Oracle primary key fields.
            </summary>
        </member>
        <member name="M:PetaPoco.TableInfo.FromPoco(System.Type)">
            <summary>
            Constructs and initializes a TableInfo instance from the attributes of the specified POCO type.
            </summary>
            <param name="pocoType">The POCO type representing a single result record in the associated database table.</param>
            <returns>The TableInfo instance.</returns>
        </member>
        <member name="T:PetaPoco.Transaction">
            <summary>
            A scoped Transaction object to facilitate maintaining transaction depth counts and proper rollbacks.
            </summary>
        </member>
        <member name="M:PetaPoco.Transaction.#ctor(PetaPoco.IDatabase)">
            <summary>
            Creates a new Transaction instance for the specified database, and begins the transaction.
            </summary>
            <param name="database">The database instance that will execute the transaction.</param>
            <seealso cref="M:PetaPoco.IDatabase.BeginTransaction"/>
        </member>
        <member name="M:PetaPoco.Transaction.Complete">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Transaction.Dispose">
            <summary>
            Closes the transaction scope, rolling back the transaction if not completed by a call to <see cref="M:PetaPoco.Transaction.Complete"/>.
            </summary>
            <seealso cref="M:PetaPoco.IDatabase.AbortTransaction"/>
        </member>
        <member name="T:PetaPoco.Database">
            <summary>
            Represents the core functionality and implementation of PetaPoco.
            </summary>
        </member>
        <member name="M:PetaPoco.Database.#ctor(PetaPoco.IMapper)">
            <summary>
            Constructs an instance with default values using the first connection string found in the app/web configuration file.
            </summary>
            <param name="defaultMapper">The default mapper to use when no specific mapper has been registered.</param>
            <exception cref="T:System.InvalidOperationException">No connection strings are registered.</exception>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.String,PetaPoco.IMapper)">
            <summary>
            Constructs an instance with the specified connection string name. The connection string and database provider will be read from
            the app or web configuration file.
            </summary>
            <remarks>
            PetaPoco will automatically close and dispose of any connections it creates.
            </remarks>
            <param name="connectionStringName">The name of the connection string to locate.</param>
            <param name="defaultMapper">The default mapper to use when no specific mapper has been registered.</param>
            <exception cref="T:System.ArgumentException"><paramref name="connectionStringName"/> is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">A connection string cannot be found.</exception>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.Data.IDbConnection,PetaPoco.IMapper)">
            <summary>
            Constructs an instance with the specified IDbConnection.
            </summary>
            <remarks>
            The supplied IDbConnection will not be closed and disposed of by PetaPoco - that remains the responsibility of the caller.
            </remarks>
            <param name="connection">The database connection.</param>
            <param name="defaultMapper">The default mapper to use when no specific mapper has been registered.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connection"/> is null or empty.</exception>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.String,System.String,PetaPoco.IMapper)">
            <summary>
            Constructs an instance with the specified connection string and database provider name.
            </summary>
            <remarks>
            PetaPoco will automatically close and dispose of any connections it creates.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">The database provider name.</param>
            <param name="defaultMapper">The default mapper to use when no specific mapper has been registered.</param>
            <exception cref="T:System.ArgumentException"><paramref name="connectionString"/> or <paramref name="providerName"/> is null or
            empty.</exception>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.String,System.Data.Common.DbProviderFactory,PetaPoco.IMapper)">
            <summary>
            Constructs an instance with the specified connection string and DbProviderFactory.
            </summary>
            <remarks>
            PetaPoco will automatically close and dispose of any connections it creates.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="factory">The database provider factory to use for database connections.</param>
            <param name="defaultMapper">The default mapper to use when no specific mapper has been registered.</param>
            <exception cref="T:System.ArgumentException"><paramref name="connectionString"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="factory"/> is null.</exception>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.String,PetaPoco.Core.IProvider,PetaPoco.IMapper)">
            <summary>
            Constructs an instance with the specified connection string and IProvider.
            </summary>
            <remarks>
            PetaPoco will automatically close and dispose of any connections it creates.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="provider">The database provider.</param>
            <param name="defaultMapper">The default mapper to use when no specific mapper has been registered.</param>
            <exception cref="T:System.ArgumentException"><paramref name="connectionString"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> is null.</exception>
        </member>
        <member name="M:PetaPoco.Database.#ctor(PetaPoco.IDatabaseBuildConfiguration)">
            <summary>
            Constructs an instance with the configured settings from the specified IDatabaseBuildConfiguration object.
            </summary>
            <param name="configuration">The build configuration instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="configuration"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">A connection string cannot be found or is not configured, or unable to locate a
            provider.</exception>
        </member>
        <member name="P:PetaPoco.Database.Connection">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.OpenSharedConnection">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.CloseSharedConnection">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Dispose">
            <summary>
            Releases the shared connection.
            </summary>
            <remarks>
            Implicitly called when the <see cref="T:PetaPoco.Database"/> instance goes out of scope at the end of a <c>using</c> block, calling <see
            cref="M:PetaPoco.Database.CloseSharedConnection"/> to ensure the connection is properly closed.
            </remarks>
        </member>
        <member name="P:PetaPoco.Database.PetaPoco#ITransactionAccessor#Transaction">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.GetTransaction">
            <inheritdoc/>
            <remarks>
            This method facilitates proper transaction lifetime management, especially when nested. Transactions can be nested but they must
            all include a call to <see cref="M:PetaPoco.Database.CompleteTransaction"/> <b>prior to exiting the scope</b>, otherwise the entire transaction is
            aborted.
            </remarks>
            <example>
            <para>A basic example of using transactional scopes (part pseudocode) is shown below:</para>
            <code language="cs" title="Transaction Scopes">
            <![CDATA[
            void DoStuff()
            {
                using (var tx = db.GetTransaction()) // Starts transaction
                {
                    db.Update(/*...*/); // Do stuff
                    if (DateTime.Now.DayOfWeek == DayOfWeek.Monday)
                        DoDoubleStuff(); // Nested transaction scope
                    tx.Complete(); // Mark the transaction as complete
                }
            }
            void DoDoubleStuff()
            {
                using var tx = db.GetTransaction(); // Continues transaction if we're nested
                db.Update(/*...*/); // Do boss's stuff, too
                tx.Complete(); // Mark transaction as complete before we exit scope
            }
            ]]>
            </code>
            </example>
            <returns>An <see cref="T:PetaPoco.ITransaction"/> reference that must be <see cref="M:PetaPoco.Database.CompleteTransaction">completed</see> or <see
            cref="M:PetaPoco.Transaction.Dispose">disposed</see>.</returns>
        </member>
        <member name="M:PetaPoco.Database.OnBeginTransaction">
            <summary>
            Called immediately after opening a transaction, and invokes the <see cref="E:PetaPoco.IDatabase.TransactionStarted"/> event.
            </summary>
        </member>
        <member name="M:PetaPoco.Database.OnEndTransaction">
            <summary>
            Called immediately before closing a transaction, and invokes the <see cref="E:PetaPoco.IDatabase.TransactionEnding"/> event.
            </summary>
        </member>
        <member name="M:PetaPoco.Database.BeginTransaction">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.AbortTransaction">
            <inheritdoc/>
            <remarks>
            Called automatically by <see cref="M:PetaPoco.Transaction.Dispose"/> if the transaction wasn't completed.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.CompleteTransaction">
            <inheritdoc/>
            <remarks>
            Not calling complete will cause the transaction to rollback on <see cref="M:PetaPoco.Transaction.Dispose"/>.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.OnException(System.Exception)">
            <summary>
            Called if an exception is thrown during a database operation, and invokes the <see cref="E:PetaPoco.IDatabase.ExceptionThrown"/> event.
            </summary>
            <param name="ex">The caught exception.</param>
            <returns><see langword="true"/> to re-throw the exception, <see langword="false"/> to suppress it.</returns>
        </member>
        <member name="M:PetaPoco.Database.OnConnectionOpened(System.Data.IDbConnection)">
            <summary>
            Called immediately after a database connection is opened, and invokes the <see cref="E:PetaPoco.IDatabase.ConnectionOpened"/> event.
            </summary>
            <remarks>
            Override this method to provide custom logging of opened connections, or to provide a proxy IDbConnection.
            </remarks>
            <param name="connection">The opened connection.</param>
            <returns>The same or a replacement IDbConnection.</returns>
        </member>
        <member name="M:PetaPoco.Database.OnConnectionOpening(System.Data.IDbConnection)">
            <summary>
            Called immediately before a database connection is opened, and invokes the <see cref="!:IDatabase.ConnectionOpening"/> event.
            </summary>
            <remarks>
            Override this method to provide custom logging of opening connections, or to provide a proxy IDbConnection.
            </remarks>
            <param name="connection">The connection to be opened.</param>
            <returns>The same or a replacement IDbConnection.</returns>
        </member>
        <member name="M:PetaPoco.Database.OnConnectionClosing(System.Data.IDbConnection)">
            <summary>
            Called immediately before a database connection is closed, and invokes the <see cref="E:PetaPoco.IDatabase.ConnectionClosing"/> event.
            </summary>
            <param name="connection">The connection to be closed.</param>
        </member>
        <member name="M:PetaPoco.Database.OnExecutingCommand(System.Data.IDbCommand)">
            <summary>
            Called immediately before a database command is executed, and invokes the <see cref="E:PetaPoco.IDatabase.CommandExecuting"/> event.
            </summary>
            <remarks>
            Override this method to provide custom logging of commands, modification of the IDbCommand before it's executed, or any other
            custom actions that should be performed before every command
            </remarks>
            <param name="cmd">The SQL command to be executed.</param>
        </member>
        <member name="M:PetaPoco.Database.OnExecutedCommand(System.Data.IDbCommand)">
            <summary>
            Called immediately after a database command execution completes, and invokes the <see cref="E:PetaPoco.IDatabase.CommandExecuted"/> event.
            </summary>
            <remarks>
            Override this method to provide custom logging or other actions after every command has completed.
            </remarks>
            <param name="cmd">The executed SQL command.</param>
        </member>
        <member name="M:PetaPoco.Database.Execute(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Execute(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.ExecuteInternal(System.Data.CommandType,System.String,System.Object[])">
            <param name="commandType">The type of command to execute.</param>
            <param name="sql">The SQL statement.</param>
            <param name="args">The parameters to embed in the SQL statement.</param>
            <inheritdoc cref="M:PetaPoco.IExecute.Execute(System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.Database.ExecuteScalar``1(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.ExecuteScalar``1(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.ExecuteScalarInternal``1(System.Data.CommandType,System.String,System.Object[])">
            <param name="commandType">The type of command to execute.</param>
            <param name="sql">The SQL statement.</param>
            <param name="args">The parameters to embed in the SQL statement.</param>
            <inheritdoc cref="M:PetaPoco.IExecute.ExecuteScalar``1(System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.Database.Query``1">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``1(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``1(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.ExecuteReader``1(System.Data.CommandType,System.String,System.Object[])">
            <param name="commandType">The type of command to execute.</param>
            <param name="sql">The SQL statement.</param>
            <param name="args">The parameters to embed in the SQL statement.</param>
            <inheritdoc cref="M:PetaPoco.IQuery.Query``1(System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.Database.Query``2(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``3(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``4(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``5(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``2(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``3(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``4(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``5(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``3(System.Func{``0,``1,``2},PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``4(System.Func{``0,``1,``2,``3},PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``5(System.Func{``0,``1,``2,``3,``4},PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``6(System.Func{``0,``1,``2,``3,``4,``5},PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``3(System.Func{``0,``1,``2},System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``4(System.Func{``0,``1,``2,``3},System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Query``1(System.Type[],System.Object,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.QueryMultiple(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.QueryMultiple(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``2(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``3(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``4(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``5(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``2(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``3(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``4(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``5(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``3(System.Func{``0,``1,``2},PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``4(System.Func{``0,``1,``2,``3},PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``5(System.Func{``0,``1,``2,``3,``4},PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``6(System.Func{``0,``1,``2,``3,``4,``5},PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``3(System.Func{``0,``1,``2},System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``4(System.Func{``0,``1,``2,``3},System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1(System.Int64,System.Int64,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,PetaPoco.Sql,PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,System.String,System.Object[],System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.SkipTake``1(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.SkipTake``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.SkipTake``1(System.Int64,System.Int64,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.BuildPageQueries``1(System.Int64,System.Int64,System.String,System.Object[]@,System.String@,System.String@)">
            <summary>
            Starting with a regular <c>SELECT</c> statement, derives the SQL statements required to query a DB for a page of records and the
            total number of records.
            </summary>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="skip">The number of records to skip before the start of the page.</param>
            <param name="take">The number of records in the page.</param>
            <param name="sql">The SQL statement.</param>
            <param name="args">The parameters to embed in the SQL statement.</param>
            <param name="countSql">When this method returns, contains the SQL statement to query for the total number of records.</param>
            <param name="pageSql">When this method returns, contains the SQL statement to retrieve a single page of records.</param>
            <exception cref="T:System.Exception">Unable to parse the given <paramref name="sql"/> statement.</exception>
        </member>
        <member name="M:PetaPoco.Database.Exists``1(System.Object)">
            <inheritdoc/>
            <example>
            <code language="cs" title="Exists">
            <![CDATA[
            var order = new Order { Id = 7, /*...*/ };
            db.Exists<Person>(7); // with a primary key value
            db.Exists<Person>(person); // with a poco object (PetaPoco will extract the primary key value)
            ]]>
            </code>
            </example>
        </member>
        <member name="M:PetaPoco.Database.Exists``1(System.String,System.Object[])">
            <inheritdoc/>
            <example>
            <code language="cs" title="Exists">
            <![CDATA[
            var peta = "Peta";
            db.Exists<Person>("[full_name] = @0", peta);
            db.Exists<Person>("WHERE [full_name] = @0", peta); // with long-form syntax ("WHERE" unnecessary, but ok)
            ]]>
            </code>
            </example>
        </member>
        <member name="M:PetaPoco.Database.Single``1(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Single``1(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Single``1(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.SingleOrDefault``1(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.SingleOrDefault``1(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.SingleOrDefault``1(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.First``1(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.First``1(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.FirstOrDefault``1(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.FirstOrDefault``1(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Insert(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="poco"/> is null.</exception>
        </member>
        <member name="M:PetaPoco.Database.Insert(System.String,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="tableName"/> or <paramref name="poco"/> is null or empty.</exception>
        </member>
        <member name="M:PetaPoco.Database.Insert(System.String,System.String,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="tableName"/>, <paramref name="primaryKeyName"/>, or <paramref
            name="poco"/> is null or empty.</exception>
        </member>
        <member name="M:PetaPoco.Database.Insert(System.String,System.String,System.Boolean,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="tableName"/>, <paramref name="primaryKeyName"/>, or <paramref
            name="poco"/> is null or empty.</exception>
        </member>
        <member name="M:PetaPoco.Database.ExecuteInsert(System.String,System.String,System.Boolean,System.Object)">
            <inheritdoc cref="M:PetaPoco.IAlterPoco.Insert(System.String,System.String,System.Boolean,System.Object)"/>
        </member>
        <member name="M:PetaPoco.Database.Update(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="poco"/> is null.</exception>
        </member>
        <member name="M:PetaPoco.Database.Update(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="poco"/> is null.</exception>
        </member>
        <member name="M:PetaPoco.Database.Update(System.Object,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="poco"/> is null.</exception>
        </member>
        <member name="M:PetaPoco.Database.Update(System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="poco"/> is null.</exception>
        </member>
        <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="tableName"/>, <paramref name="primaryKeyName"/>, or <paramref
            name="poco"/> is null or empty.</exception>
        </member>
        <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="tableName"/>, <paramref name="primaryKeyName"/>, or <paramref
            name="poco"/> is null or empty.</exception>
        </member>
        <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="tableName"/>, <paramref name="primaryKeyName"/>, or <paramref
            name="poco"/> is null or empty.</exception>
        </member>
        <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="tableName"/>, <paramref name="primaryKeyName"/>, or <paramref
            name="poco"/> is null or empty.</exception>
        </member>
        <member name="M:PetaPoco.Database.Update``1(PetaPoco.Sql)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="sql"/> is null.</exception>
        </member>
        <member name="M:PetaPoco.Database.Update``1(System.String,System.Object[])">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="sql"/> is null or empty.</exception>
        </member>
        <member name="M:PetaPoco.Database.ExecuteUpdate(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:PetaPoco.Database.Delete(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Delete(System.String,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Delete(System.String,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Delete``1(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Anonymous type does not contain an id for primary key column.</exception>
        </member>
        <member name="M:PetaPoco.Database.Delete``1(PetaPoco.Sql)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.Delete``1(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.IsNew(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="poco"/> is null.</exception>
        </member>
        <member name="M:PetaPoco.Database.IsNew(System.String,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException"><paramref name="primaryKeyName"/> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="poco"/> or <paramref name="primaryKeyName"/> is null.</exception>
        </member>
        <member name="M:PetaPoco.Database.IsNew(System.String,PetaPoco.Core.PocoData,System.Object)">
            <inheritdoc cref="M:PetaPoco.IAlterPoco.IsNew(System.String,System.Object)"/>
            <param name="primaryKeyName">The table's primary key column name.</param>
            <param name="pocoData">The PocoData instance for the specified POCO.</param>
            <param name="poco">The POCO instance to check.</param>
            <exception cref="T:System.InvalidOperationException"><paramref name="primaryKeyName"/> is null or empty, or <paramref name="poco"/> is an
            ExpandoObject.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="poco"/> doesn't have a property matching the primary key column
            name.</exception>
        </member>
        <member name="M:PetaPoco.Database.Save(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="poco"/> is null.</exception>
        </member>
        <member name="M:PetaPoco.Database.Save(System.String,System.String,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException"><paramref name="primaryKeyName"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="poco"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tableName"/>, <paramref name="primaryKeyName"/>, or <paramref
            name="poco"/> is null or empty.</exception>
        </member>
        <member name="M:PetaPoco.Database.ExecuteNonQueryProc(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.ExecuteScalarProc``1(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.QueryProc``1(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.FetchProc``1(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.CreateCommand(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Creates a <see cref="F:System.Data.CommandType.Text"/> IDbCommand with the given connection, SQL command text, and arguments.
            </summary>
            <param name="connection">The connection that will execute the SQL command.</param>
            <param name="sql">The SQL command string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>An IDbCommand object that represents the SQL command to execute against the provided IDbConnection.</returns>
        </member>
        <member name="M:PetaPoco.Database.CreateCommand(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Object[])">
            <summary>
            Creates an IDbCommand with the given connection, command type, SQL command text, and arguments.
            </summary>
            <param name="connection">The connection that will execute the SQL command.</param>
            <param name="commandType">The type of SQL command to create.</param>
            <param name="sql">The SQL command string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>An IDbCommand object that represents the SQL command to execute against the provided IDbConnection.</returns>
        </member>
        <member name="M:PetaPoco.Database.CreateParameter">
            <summary>
            Creates an IDbDataParameter with default values.
            </summary>
            <returns>The IDbDataParameter.</returns>
        </member>
        <member name="M:PetaPoco.Database.CreateParameter(System.String,System.Object)">
            <summary>
            Creates an IDbDataParameter with the given name and value.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <returns>The IDbDataParameter.</returns>
        </member>
        <member name="M:PetaPoco.Database.CreateParameter(System.String,System.Data.ParameterDirection)">
            <summary>
            Creates an IDbDataParameter with the given name and direction.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="direction">The parameter direction.</param>
            <returns>The IDbDataParameter.</returns>
        </member>
        <member name="M:PetaPoco.Database.CreateParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            Creates an IDbParameter with the given name, value, and direction.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <param name="direction">The parameter direction.</param>
            <returns>The IDbDataParameter.</returns>
        </member>
        <member name="M:PetaPoco.Database.SetParameterProperties(System.Data.IDbDataParameter,System.Object,PetaPoco.Core.PocoColumn)">
            <summary>
            Prepares an IDbDataParameter by setting its properties prior to being added to a command.
            </summary>
            <param name="param">The IDbDataParameter to which the properties will be set.</param>
            <param name="value">The value to be assigned to the IDbDataParameter.</param>
            <param name="pocoColumn">The PocoColumn instance for the POCO's column-mapped property.</param>
        </member>
        <member name="M:PetaPoco.Database.AddParameter(System.Data.IDbCommand,System.Object,PetaPoco.Core.PocoColumn)">
            <summary>
            Adds an IDbDataParameter to a command.
            </summary>
            <param name="cmd">The SQL command receiving the parameter.</param>
            <param name="value">The value to assign to the parameter.</param>
            <param name="pc">An optional reference to the PocoColumn instance the value originated from.</param>
        </member>
        <member name="M:PetaPoco.Database.ExecuteReaderHelper(System.Data.IDbCommand)">
            <summary>
            Executes an SQL query command and returns a data reader for reading the result set.
            </summary>
            <param name="cmd">The SQL command to execute.</param>
            <returns>A data reader for reading the result set.</returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteReader"/>
        </member>
        <member name="M:PetaPoco.Database.ExecuteNonQueryHelper(System.Data.IDbCommand)">
            <summary>
            Executes an SQL non-query command and returns the number of rows affected.
            </summary>
            <param name="cmd">The SQL command to execute.</param>
            <returns>The number of rows affected.</returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteNonQuery"/>
        </member>
        <member name="M:PetaPoco.Database.ExecuteScalarHelper(System.Data.IDbCommand)">
            <summary>
            Executes an SQL scalar command and returns the first column of the first row in the result set.
            </summary>
            <param name="cmd">The SQL command to execute.</param>
            <returns>The first column of the first row in the result set.</returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:PetaPoco.Database.CommandHelper(System.Data.IDbCommand,System.Func{System.Data.IDbCommand,System.Object})">
            <summary>
            Executes an SQL command using the provided function and returns the result.
            </summary>
            <param name="cmd">The SQL command to execute.</param>
            <param name="executionFunction">The function to execute the SQL command and return the result.</param>
            <returns>The result of the SQL command execution.</returns>
        </member>
        <member name="P:PetaPoco.Database.LastSQL">
            <inheritdoc/>
        </member>
        <member name="P:PetaPoco.Database.LastArgs">
            <inheritdoc/>
        </member>
        <member name="P:PetaPoco.Database.LastCommand">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Database.FormatCommand(System.Data.IDbCommand)">
            <summary>
            Formats an IDbCommand for display.
            </summary>
            <param name="cmd">The SQL command to format.</param>
            <returns>The formatted SQL command.</returns>
        </member>
        <member name="M:PetaPoco.Database.FormatCommand(System.String,System.Object[])">
            <summary>
            Formats an SQL statement and its arguments for display.
            </summary>
            <param name="sql">The SQL statement.</param>
            <param name="args">The parameters embedded in the SQL statement.</param>
            <returns>The formatted SQL statement.</returns>
        </member>
        <member name="P:PetaPoco.Database.DefaultMapper">
            <summary>
            <inheritdoc/>
            Default is <see cref="T:PetaPoco.ConventionMapper"/>.
            </summary>
        </member>
        <member name="P:PetaPoco.Database.ConnectionString">
            <inheritdoc/>
        </member>
        <member name="P:PetaPoco.Database.Provider">
            <inheritdoc/>
        </member>
        <member name="P:PetaPoco.Database.IsolationLevel">
            <summary>
            <inheritdoc/>
            Default is <see langword="null"/>.
            </summary>
            <value>If <see langword="null"/>, the default isolation level of the underlying <see cref="P:PetaPoco.Database.Provider"/> is used.</value>
            <exception cref="T:System.InvalidOperationException">If changed while a transaction is in progress.</exception>
        </member>
        <member name="P:PetaPoco.Database.KeepConnectionAlive">
            <summary>
            <inheritdoc/>
            Default is <see langword="false"/>.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:PetaPoco.Database.EnableAutoSelect">
            <summary>
            <inheritdoc/>
            Default is <see langword="true"/>.
            </summary>
            <value>If <see langword="true"/>, PetaPoco will automatically generate the <c>SELECT</c> portion of the query when needed if not
            explicitly provided in the supplied SQL statement.</value>
            <example>
            <para/>In the following example, all three queries below will result in the same outcome:
            <code language="cs" title="EnableAutoSelect">
            <![CDATA[
            var note = db.Single<Note>("WHERE `id` = @0", 123);
            var note = db.Single<Note>("FROM `notes` WHERE `id` = @0", 123);
            var note = db.Single<Note>("SELECT * FROM `notes` WHERE `id` = @0", 123);
            ]]>
            </code>
            The generated SQL produced by PetaPoco, shown below, is identical for all three:
            <code language="sql">
            <![CDATA[
            SELECT [Note].[Id], [Note].[CreatedOn], [Note].[Text] FROM [Note] WHERE [Id] = @0;
            ]]>
            </code>
            </example>
        </member>
        <member name="P:PetaPoco.Database.EnableNamedParams">
            <summary>
            <inheritdoc/> Default is <see langword="true"/>.
            </summary>
            <value>If <see langword="true"/>, parameters can be named "?myparam" in the SQL string, and populated from properties of the
            passed-in argument values.</value>
        </member>
        <member name="P:PetaPoco.Database.CommandTimeout">
            <summary>
            <inheritdoc/> Default is 0.
            </summary>
            <value>If 0, PetaPoco will use the default <see cref="P:System.Data.IDbCommand.CommandTimeout"/> value for the active database <see
            cref="P:PetaPoco.Database.Provider"/> (typically 30 seconds).</value>
        </member>
        <member name="P:PetaPoco.Database.OneTimeCommandTimeout">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="E:PetaPoco.Database.TransactionStarted">
            <inheritdoc/>
        </member>
        <member name="E:PetaPoco.Database.TransactionEnding">
            <inheritdoc/>
        </member>
        <member name="E:PetaPoco.Database.CommandExecuting">
            <inheritdoc/>
        </member>
        <member name="E:PetaPoco.Database.CommandExecuted">
            <inheritdoc/>
        </member>
        <member name="E:PetaPoco.Database.ConnectionOpening">
            <inheritdoc/>
        </member>
        <member name="E:PetaPoco.Database.ConnectionOpened">
            <inheritdoc/>
        </member>
        <member name="E:PetaPoco.Database.ConnectionClosing">
            <inheritdoc/>
        </member>
        <member name="E:PetaPoco.Database.ExceptionThrown">
            <inheritdoc/>
        </member>
        <member name="T:PetaPoco.Database`1">
            <inheritdoc/>
            <typeparam name="TDatabaseProvider">The provider type, which must implement the <see cref="T:PetaPoco.Core.IProvider"/> interface.</typeparam>
        </member>
        <member name="M:PetaPoco.Database`1.#ctor(System.String,PetaPoco.IMapper)">
            <inheritdoc cref="M:PetaPoco.Database.#ctor(System.String,PetaPoco.Core.IProvider,PetaPoco.IMapper)"/>
        </member>
        <member name="T:PetaPoco.DatabaseConfiguration">
            <summary>
            A helper class which enables fluent configuration.
            </summary>
        </member>
        <member name="M:PetaPoco.DatabaseConfiguration.#ctor">
            <summary>
            Private constructor to force usage of static build method.
            </summary>
        </member>
        <member name="M:PetaPoco.DatabaseConfiguration.Build">
            <summary>
            Starts a new PetaPoco build configuration.
            </summary>
            <returns>An instance of <see cref="T:PetaPoco.IDatabaseBuildConfiguration"/> to form a fluent interface.</returns>
        </member>
        <member name="T:PetaPoco.DatabaseConfigurationExtensions">
            <summary>
            Extension methods for <see cref="T:PetaPoco.IDatabaseBuildConfiguration"/>, and the fluent interface integration.
            </summary>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingCommandTimeout(PetaPoco.IDatabaseBuildConfiguration,System.Int32)">
            <summary>
            Sets <see cref="P:PetaPoco.IDatabase.CommandTimeout"/> to the specified value.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="seconds">The timeout in seconds.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="seconds"/> is less than 1.</exception>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.WithAutoSelect(PetaPoco.IDatabaseBuildConfiguration)">
            <summary>
            Enables auto-select, equivalent to setting <see cref="P:PetaPoco.IDatabase.EnableAutoSelect"/> to <see langword="true"/>.
            </summary>
            <param name="source">The configuration source.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.WithoutAutoSelect(PetaPoco.IDatabaseBuildConfiguration)">
            <summary>
            Disables auto-select, equivalent to setting <see cref="P:PetaPoco.IDatabase.EnableAutoSelect"/> to <see langword="false"/>.
            </summary>
            <param name="source">The configuration source.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.WithNamedParams(PetaPoco.IDatabaseBuildConfiguration)">
            <summary>
            Enables named parameters, equivalent to setting <see cref="P:PetaPoco.IDatabase.EnableNamedParams"/> to <see langword="true"/>.
            </summary>
            <param name="source">The configuration source.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.WithoutNamedParams(PetaPoco.IDatabaseBuildConfiguration)">
            <summary>
            Disables named parameters, equivalent to setting <see cref="P:PetaPoco.IDatabase.EnableNamedParams"/> to <see langword="false"/>.
            </summary>
            <param name="source">The configuration source.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingConnectionStringName(PetaPoco.IDatabaseBuildConfiguration,System.String)">
            <summary>
            Specifies a connection string name to be used to locate a connection string. The <see cref="P:PetaPoco.IDatabase.ConnectionString"/> and
            <see cref="P:PetaPoco.IDatabase.Provider"/> will be read from the app or web configuration file.
            </summary>
            <remarks>
            PetaPoco will automatically close and dispose of any connections it creates.
            </remarks>
            <param name="source">The configuration source.</param>
            <param name="connectionStringName">The name of the connection string to locate.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="connectionStringName"/> is null or empty.</exception>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingConnectionString(PetaPoco.IDatabaseBuildConfiguration,System.String)">
            <summary>
            Specifies a connection string to use.
            </summary>
            <remarks>
            PetaPoco will automatically close and dispose of any connections it creates.
            </remarks>
            <param name="source">The configuration source.</param>
            <param name="connectionString">The connection string.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="connectionString"/> is null or empty.</exception>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingConnection(PetaPoco.IDatabaseBuildConfiguration,System.Data.IDbConnection)">
            <summary>
            Specifies an existing <see cref="T:System.Data.IDbConnection"/> to use.
            </summary>
            <remarks>
            The supplied IDbConnection will not be closed and disposed of by PetaPoco - that remains the responsibility of the caller.
            </remarks>
            <param name="source">The configuration source.</param>
            <param name="connection">The database connection.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="connection"/> is null.</exception>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingProviderName(PetaPoco.IDatabaseBuildConfiguration,System.String)">
            <summary>
            Specifies the provider name to be used when resolving the <see cref="P:PetaPoco.IDatabase.Provider"/>.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="providerName">The provider name to resolve.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="providerName"/> is null or empty.</exception>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingProvider``1(PetaPoco.IDatabaseBuildConfiguration)">
            <summary>
            Specifies the <see cref="T:PetaPoco.Core.IProvider"/> to use.
            </summary>
            <remarks>
            This takes precedence over <see cref="M:PetaPoco.DatabaseConfigurationExtensions.UsingProviderName(PetaPoco.IDatabaseBuildConfiguration,System.String)"/>.
            </remarks>
            <typeparam name="TProvider">The provider type, which must implement the the <see cref="T:PetaPoco.Core.IProvider"/> interface.</typeparam>
            <param name="source">The configuration source.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingProvider``1(PetaPoco.IDatabaseBuildConfiguration,System.Action{``0})">
            <summary>
            Specifies the <see cref="T:PetaPoco.Core.IProvider"/> to use, with an accompanying configuration provider action.
            </summary>
            <remarks>
            This takes precedence over <see cref="M:PetaPoco.DatabaseConfigurationExtensions.UsingProviderName(PetaPoco.IDatabaseBuildConfiguration,System.String)"/>.
            </remarks>
            <typeparam name="TProvider">The provider type, which must implement the the <see cref="T:PetaPoco.Core.IProvider"/> interface.</typeparam>
            <param name="source">The configuration source.</param>
            <param name="configurer">The action used to configure the provider.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="configurer"/> is null.</exception>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingProvider``1(PetaPoco.IDatabaseBuildConfiguration,``0)">
            <summary>
            Specifies the <see cref="T:PetaPoco.Core.IProvider"/> to use.
            </summary>
            <remarks>
            This takes precedence over <see cref="M:PetaPoco.DatabaseConfigurationExtensions.UsingProviderName(PetaPoco.IDatabaseBuildConfiguration,System.String)"/>.
            </remarks>
            <typeparam name="TProvider">The provider type, which must implement the the <see cref="T:PetaPoco.Core.IProvider"/> interface.</typeparam>
            <param name="source">The configuration source.</param>
            <param name="provider">The database provider.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> is null.</exception>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingProvider``1(PetaPoco.IDatabaseBuildConfiguration,``0,System.Action{``0})">
            <summary>
            Specifies the <see cref="T:PetaPoco.Core.IProvider"/> to use, with an accompanying configuration provider action.
            </summary>
            <remarks>
            This takes precedence over <see cref="M:PetaPoco.DatabaseConfigurationExtensions.UsingProviderName(PetaPoco.IDatabaseBuildConfiguration,System.String)"/>.
            </remarks>
            <typeparam name="TProvider">The provider type, which must implement the the <see cref="T:PetaPoco.Core.IProvider"/> interface.</typeparam>
            <param name="source">The configuration source.</param>
            <param name="configurer">The action used to configure the provider.</param>
            <param name="provider">The database provider.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> or <paramref name="configurer"/> is null.</exception>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingDefaultMapper``1(PetaPoco.IDatabaseBuildConfiguration)">
            <summary>
            Specifies the default <see cref="T:PetaPoco.IMapper"/> to use when no specific mapper has been registered.
            </summary>
            <typeparam name="TMapper">The mapper type, which must implement the the <see cref="T:PetaPoco.IMapper"/> interface.</typeparam>
            <param name="source">The configuration source.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingDefaultMapper``1(PetaPoco.IDatabaseBuildConfiguration,System.Action{``0})">
            <summary>
            Specifies the default <see cref="T:PetaPoco.IMapper"/> to use when no specific mapper has been registered, with an accompanying
            configuration mapper action.
            </summary>
            <typeparam name="TMapper">The mapper type, which must implement the the <see cref="T:PetaPoco.IMapper"/> interface.</typeparam>
            <param name="source">The configuration source.</param>
            <param name="configurer">The action used to configure the mapper.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="configurer"/> action is null.</exception>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingDefaultMapper``1(PetaPoco.IDatabaseBuildConfiguration,``0)">
            <summary>
            Specifies the default <see cref="T:PetaPoco.IMapper"/> to use when no specific mapper has been registered.
            </summary>
            <typeparam name="TMapper">The mapper type, which must implement the the <see cref="T:PetaPoco.IMapper"/> interface.</typeparam>
            <param name="source">The configuration source.</param>
            <param name="mapper">The default mapper to use when no specific mapper has been registered.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="mapper"/> is null.</exception>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingDefaultMapper``1(PetaPoco.IDatabaseBuildConfiguration,``0,System.Action{``0})">
            <summary>
            Specifies the default <see cref="T:PetaPoco.IMapper"/> to use when no specific mapper has been registered, with an accompanying
            configuration mapper action.
            </summary>
            <typeparam name="TMapper">The mapper type, which must implement the the <see cref="T:PetaPoco.IMapper"/> interface.</typeparam>
            <param name="source">The configuration source.</param>
            <param name="mapper">The default mapper to use when no specific mapper has been registered.</param>
            <param name="configurer">The action used to configure the mapper.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="mapper"/> or <paramref name="configurer"/> is null.</exception>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingIsolationLevel(PetaPoco.IDatabaseBuildConfiguration,System.Data.IsolationLevel)">
            <summary>
            Specifies the transaction isolation level to use.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="isolationLevel">The isolation level.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingTransactionStarted(PetaPoco.IDatabaseBuildConfiguration,System.EventHandler{PetaPoco.DbTransactionEventArgs})">
            <summary>
            Specifies an event handler to use when a transaction has been started.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="handler">A callback function for handling <see cref="E:PetaPoco.IDatabase.TransactionStarted"/> events.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingTransactionEnding(PetaPoco.IDatabaseBuildConfiguration,System.EventHandler{PetaPoco.DbTransactionEventArgs})">
            <summary>
            Specifies an event handler to use when a transaction is about to be rolled back or committed.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="handler">A callback function for handling <see cref="E:PetaPoco.IDatabase.TransactionEnding"/> events.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingCommandExecuting(PetaPoco.IDatabaseBuildConfiguration,System.EventHandler{PetaPoco.DbCommandEventArgs})">
            <summary>
            Specifies an event handler to use when a database command is about to be executed.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="handler">A callback function for handling <see cref="E:PetaPoco.IDatabase.CommandExecuting"/> events.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingCommandExecuted(PetaPoco.IDatabaseBuildConfiguration,System.EventHandler{PetaPoco.DbCommandEventArgs})">
            <summary>
            Specifies an event handler to use when a database command has been executed.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="handler">A callback function for handling <see cref="E:PetaPoco.IDatabase.CommandExecuted"/> events.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingConnectionOpening(PetaPoco.IDatabaseBuildConfiguration,System.EventHandler{PetaPoco.DbConnectionEventArgs})">
            <summary>
            Specifies an event handler to use when a connection is about to be opened.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="handler">A callback function for handling <see cref="!:IDatabase.ConnectionOpening"/> events.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingConnectionOpened(PetaPoco.IDatabaseBuildConfiguration,System.EventHandler{PetaPoco.DbConnectionEventArgs})">
            <summary>
            Specifies an event handler to use when a database connection has been opened.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="handler">A callback function for handling <see cref="E:PetaPoco.IDatabase.ConnectionOpened"/> events.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingConnectionClosing(PetaPoco.IDatabaseBuildConfiguration,System.EventHandler{PetaPoco.DbConnectionEventArgs})">
            <summary>
            Specifies an event handler to use when a database connection is about to be closed.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="handler">A callback function for handling <see cref="E:PetaPoco.IDatabase.ConnectionClosing"/> events.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingExceptionThrown(PetaPoco.IDatabaseBuildConfiguration,System.EventHandler{PetaPoco.ExceptionEventArgs})">
            <summary>
            Specifies an event handler to use when a database exception has been thrown.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="handler">A callback function for handling <see cref="E:PetaPoco.IDatabase.ExceptionThrown"/> events.</param>
            <returns>The original <paramref name="source"/> configuration, to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.Create(PetaPoco.IDatabaseBuildConfiguration)">
            <summary>
            Creates an instance of PetaPoco using the specified <paramref name="source"/>.
            </summary>
            <param name="source">The configuration source used to create and configure an instance of PetaPoco.</param>
            <returns>An instance of PetaPoco.</returns>
        </member>
        <member name="T:PetaPoco.DbTransactionEventArgs">
            <summary>
            Event arguments for an <see cref="T:System.Data.IDbTransaction"/> event.
            </summary>
        </member>
        <member name="P:PetaPoco.DbTransactionEventArgs.Transaction">
            <summary>
            Gets the database transaction associated with the event.
            </summary>
        </member>
        <member name="M:PetaPoco.DbTransactionEventArgs.#ctor(System.Data.IDbTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:PetaPoco.DbTransactionEventArgs"/> class.
            </summary>
            <param name="transaction">The database transaction associated with the event.</param>
        </member>
        <member name="T:PetaPoco.DbCommandEventArgs">
            <summary>
            Event arguments for an <see cref="T:System.Data.IDbCommand"/> event.
            </summary>
        </member>
        <member name="P:PetaPoco.DbCommandEventArgs.Command">
            <summary>
            Gets the database command associated with the event.
            </summary>
        </member>
        <member name="M:PetaPoco.DbCommandEventArgs.#ctor(System.Data.IDbCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:PetaPoco.DbCommandEventArgs"/> class.
            </summary>
            <param name="command">The database command associated with the event.</param>
        </member>
        <member name="T:PetaPoco.DbConnectionEventArgs">
            <summary>
            Event arguments for an <see cref="T:System.Data.IDbConnection"/> event.
            </summary>
        </member>
        <member name="P:PetaPoco.DbConnectionEventArgs.Connection">
            <summary>
            Gets or sets the database connection associated with the event.
            </summary>
        </member>
        <member name="M:PetaPoco.DbConnectionEventArgs.#ctor(System.Data.IDbConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:PetaPoco.DbConnectionEventArgs"/> class.
            </summary>
            <param name="connection">The database connection associated with the event.</param>
        </member>
        <member name="T:PetaPoco.ExceptionEventArgs">
            <summary>
            Event arguments for an <see cref="T:System.Exception"/> event.
            </summary>
        </member>
        <member name="P:PetaPoco.ExceptionEventArgs.Raise">
            <summary>
            Gets or sets a flag specifying whether the exception should be raised or ignored.
            Default is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:PetaPoco.ExceptionEventArgs.Exception">
            <summary>
            Gets the caught exception.
            </summary>
        </member>
        <member name="M:PetaPoco.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PetaPoco.ExceptionEventArgs"/> class.
            </summary>
            <param name="ex">The caught exception.</param>
        </member>
        <member name="T:PetaPoco.IAlterPoco">
            <summary>
            Specifies a set of methods for performing SQL operations on POCOs such as Insert, Update, Delete, and Save.
            </summary>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Insert(System.Object)">
            <summary>
            Inserts a new record and returns the primary key of the newly inserted record.
            </summary>
            <inheritdoc cref="M:PetaPoco.IAlterPoco.Insert(System.String,System.Object)"/>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Insert(System.String,System.Object)">
            <remarks>
            If a mapped primary key column is auto-incrementing and <see cref="P:PetaPoco.TableInfo.AutoIncrement"/> is <see langword="true"/>, the
            primary key property of the POCO will be updated with the new record's auto-incremented ID.
            </remarks>
            <inheritdoc cref="M:PetaPoco.IAlterPoco.Insert(System.String,System.String,System.Boolean,System.Object)"/>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Insert(System.String,System.String,System.Object)">
            <remarks>
            If <paramref name="primaryKeyName"/> represents an auto-incrementing column and <see cref="P:PetaPoco.TableInfo.AutoIncrement"/> is <see
            langword="true"/>, the primary key property of the POCO will be updated with the new record's auto-incremented ID.
            </remarks>
            <inheritdoc cref="M:PetaPoco.IAlterPoco.Insert(System.String,System.String,System.Boolean,System.Object)"/>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Insert(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Inserts a new record into the specified table and returns the primary key of the newly inserted record.
            </summary>
            <remarks>
            If <paramref name="autoIncrement"/> is <see langword="true"/>, the primary key property of the POCO will be updated with the new
            record's auto-incremented ID.
            </remarks>
            <param name="tableName">The name of the table where the record will be inserted.</param>
            <param name="primaryKeyName">The table's primary key column name.</param>
            <param name="autoIncrement">Specifies whether the primary key column in the database is auto-incrementing.</param>
            <param name="poco">The POCO instance to insert.</param>
            <returns>The primary key of the new record if the table has a primary key column; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update(System.Object)">
            <summary>
            Updates a record and returns the number of rows affected by the update operation.
            </summary>
            <inheritdoc cref="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates the specified columns of a record and returns the number of rows affected by the update operation.
            </summary>
            <inheritdoc cref="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update(System.Object,System.Object)">
            <summary>
            Updates a record with the given ID and returns the number of rows affected by the update operation.
            </summary>
            <inheritdoc cref="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update(System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates the specified columns of a record with the given ID and returns the number of rows affected by the update operation.
            </summary>
            <inheritdoc cref="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object)">
            <summary>
            Updates a record in the provided table and returns the number of rows affected by the update operation.
            </summary>
            <inheritdoc cref="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates the specified columns of a record in the provided table and returns the number of rows affected by the update operation.
            </summary>
            <inheritdoc cref="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object,System.Object)">
            <summary>
            Updates a record with the given ID in the provided table and returns the number of rows affected by the update operation.
            </summary>
            <inheritdoc cref="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates the specified columns of a record with the given ID in the provided table and returns the number of rows affected by the
            update operation.
            </summary>
            <param name="tableName">The name of the table to update.</param>
            <param name="primaryKeyName">The table's primary key column name.</param>
            <param name="poco">The POCO instance containing the column values to update.</param>
            <param name="primaryKeyValue">The primary key value identifying the record to update.</param>
            <param name="columns">A list of column names to update, or <see langword="null"/> to update all columns.</param>
            <returns>The number of rows affected by the update operation.</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update``1(PetaPoco.Sql)">
            <summary>
            Executes an SQL update and returns the number of rows affected by the update operation.
            </summary>
            <typeparam name="T">The POCO type associated with the table to update.</typeparam>
            <param name="sql">An SQL builder instance representing the condition portion of the WHERE clause identifying the row to update
            (everything after <c>UPDATE tablename</c>) and its parameters.</param>
            <returns>The number of rows affected by the update operation.</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update``1(System.String,System.Object[])">
            <summary>
            Executes an SQL update and returns the number of rows affected by the update operation.
            </summary>
            <typeparam name="T">The POCO type associated with the table to update.</typeparam>
            <param name="sql">The SQL string representing the condition portion of the WHERE clause identifying the row to update
            (everything after <c>UPDATE tablename</c>).</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>The number of rows affected by the update operation.</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Delete(System.Object)">
            <summary>
            Deletes a record and returns the number of rows affected by the update operation.
            </summary>
            <param name="poco">The POCO instance representing the record to delete.</param>
            <returns>The number of rows affected by the delete operation.</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Delete(System.String,System.String,System.Object)">
            <summary>
            Deletes a record in the provided table and returns the number of rows affected by the update operation.
            </summary>
            <param name="tableName">The name of the table containing the record to delete.</param>
            <param name="primaryKeyName">The table's primary key column name.</param>
            <param name="poco">The POCO instance representing the record to delete.</param>
            <returns>The number of rows affected by the delete operation.</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Delete(System.String,System.String,System.Object,System.Object)">
            <summary>
            Deletes a record with the given ID in the provided table and returns the number of rows affected by the update operation.
            </summary>
            <param name="tableName">The name of the table containing the record to delete.</param>
            <param name="primaryKeyName">The table's primary key column name.</param>
            <param name="poco">The POCO instance representing the record to delete, or <see langword="null"/> to use the provided <paramref
            name="primaryKeyValue"/>.</param>
            <param name="primaryKeyValue">The primary key value identifying the record to delete, used if <paramref name="poco"/> is <see
            langword="null"/>.</param>
            <returns>The number of rows affected by the delete operation.</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Delete``1(System.Object)">
            <summary>
            Deletes a record and returns the number of rows affected by the update operation.
            </summary>
            <typeparam name="T">The POCO type associated with the table to delete.</typeparam>
            <param name="pocoOrPrimaryKeyValue">The primary key value, or a POCO containing an assigned primary key value.</param>
            <returns>The number of rows affected by the delete operation.</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Delete``1(PetaPoco.Sql)">
            <summary>
            Executes an SQL delete and returns the number of rows affected by the delete operation.
            </summary>
            <typeparam name="T">The POCO type associated with the table to delete.</typeparam>
            <param name="sql">An SQL builder instance representing the condition portion of the WHERE clause identifying the row to delete
            (everything after <c>DELETE FROM tablename</c>) and its parameters.</param>
            <returns>The number of rows affected by the delete operation.</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Delete``1(System.String,System.Object[])">
            <summary>
            Executes an SQL delete and returns the number of rows affected by the delete operation.
            </summary>
            <typeparam name="T">The POCO type associated with the table to delete.</typeparam>
            <param name="sql">The SQL string representing the condition portion of the WHERE clause identifying the row to delete
            (everything after <c>DELETE FROM tablename</c>).</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>The number of rows affected by the delete operation.</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.IsNew(System.Object)">
            <remarks>
            A POCO instance is considered "new" if the <paramref name="poco"/> property that maps to the associated table's primary key
            column contains a default value.
            </remarks>
            <inheritdoc cref="M:PetaPoco.IAlterPoco.IsNew(System.String,System.Object)"/>
        </member>
        <member name="M:PetaPoco.IAlterPoco.IsNew(System.String,System.Object)">
            <summary>
            Determines whether the specified POCO represents a new record that has not yet been saved to the database.
            </summary>
            <remarks>
            A POCO instance is considered "new" if the <paramref name="poco"/> property that maps to the associated table's provided column
            name contains a default value.
            </remarks>
            <param name="primaryKeyName">The table's primary key column name.</param>
            <param name="poco">The POCO instance to check.</param>
            <returns><see langword="true"/> if the POCO represents a new record; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Save(System.Object)">
            <remarks>
            Performs an <see cref="M:PetaPoco.IAlterPoco.Insert(System.Object)"/> operation if the POCO is new (as determined by <see cref="M:PetaPoco.IAlterPoco.IsNew(System.Object)"/>), and an
            <see cref="M:PetaPoco.IAlterPoco.Update(System.Object)"/> operation otherwise.
            <para>If an Insert operation is performed, and a mapped primary key column is auto-incrementing, the primary key property of the
            POCO will be updated with the new record's auto-incremented ID.</para>
            </remarks>
            <inheritdoc cref="M:PetaPoco.IAlterPoco.Save(System.String,System.String,System.Object)"/>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Save(System.String,System.String,System.Object)">
            <summary>
            Saves the specified POCO to the database by performing either an insert or an update operation, as appropriate.
            </summary>
            <remarks>
            Performs an <see cref="M:PetaPoco.IAlterPoco.Insert(System.String,System.String,System.Object)"/> operation if the POCO is new (as determined by <see cref="M:PetaPoco.IAlterPoco.IsNew(System.String,System.Object)"/>), and an <see cref="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object)"/> operation otherwise.
            <para>If an Insert operation is performed, and <paramref name="primaryKeyName"/> represents an auto-incrementing column, the
            primary key property of the POCO will be updated with the new record's auto-incremented ID.</para>
            </remarks>
            <param name="tableName">The name of the table where the POCO will be saved.</param>
            <param name="primaryKeyName">The table's primary key column name.</param>
            <param name="poco">The POCO instance to save.</param>
        </member>
        <member name="T:PetaPoco.IAsyncReader`1">
            <summary>
            Specifies a set of methods for asynchronously reading data as POCO objects from a data source.
            </summary>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
        </member>
        <member name="P:PetaPoco.IAsyncReader`1.Poco">
            <summary>
            Gets the current POCO object of type <typeparamref name="T"/> that the reader is positioned at.
            </summary>
        </member>
        <member name="M:PetaPoco.IAsyncReader`1.ReadAsync">
            <summary>
            Asynchronously reads the next row from the data source.
            </summary>
            <returns>
            A task that represents the asynchronous operation. The task result contains <see langword="true"/> if more records exist,
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:PetaPoco.IBuildConfigurationSettings">
            <summary>
            Represents the build configuration settings contract.
            </summary>
        </member>
        <member name="M:PetaPoco.IBuildConfigurationSettings.SetSetting(System.String,System.Object)">
            <summary>
            Sets a setting with a specified key that can be used for future retrieval of the setting's value.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="value">The setting's value.</param>
        </member>
        <member name="M:PetaPoco.IBuildConfigurationSettings.TryGetSetting``1(System.String,System.Action{``0},System.Action)">
            <summary>
            Attempts to locate a setting of type <typeparamref name="T"/> using the specified <paramref name="key"/>, and invokes <paramref
            name="onGetAction"/> with the setting's value if found.
            </summary>
            <typeparam name="T">The type of the setting's value object.</typeparam>
            <param name="key">The setting's key.</param>
            <param name="onGetAction">The action to invoke with the setting's value when the setting is found.</param>
            <param name="onFailAction">An optional action to invoke if the setting cannot be found.</param>
        </member>
        <member name="T:PetaPoco.IConnection">
            <summary>
            Defines methods and properties for managing database connections. This includes opening and closing shared connections, and
            accessing the currently open connection.
            </summary>
        </member>
        <member name="P:PetaPoco.IConnection.KeepConnectionAlive">
            <summary>
            Gets or sets the connection reuse policy for the shared connection or <see cref="T:PetaPoco.IDatabase"/> instance.
            </summary>
            <remarks>
            When set to <see langword="true"/> the first opened connection is kept alive until <see cref="M:PetaPoco.IConnection.CloseSharedConnection"/> is called
            or the <see cref="T:PetaPoco.IDatabase"/> is disposed.
            </remarks>
        </member>
        <member name="P:PetaPoco.IConnection.Connection">
            <summary>
            Gets the currently open shared connection, or <see langword="null"/> if there is no open connection.
            </summary>
        </member>
        <member name="M:PetaPoco.IConnection.OpenSharedConnection">
            <summary>
            Opens a connection that will be used for all subsequent queries.
            </summary>
            <remarks>
            Calls to <see cref="M:PetaPoco.IConnection.OpenSharedConnection"/> and <see cref="M:PetaPoco.IConnection.CloseSharedConnection"/> are reference counted and must be balanced.
            </remarks>
        </member>
        <member name="M:PetaPoco.IConnection.CloseSharedConnection">
            <summary>
            Releases the shared connection.
            </summary>
            <remarks>
            Calls to <see cref="M:PetaPoco.IConnection.OpenSharedConnection"/> and <see cref="M:PetaPoco.IConnection.CloseSharedConnection"/> are reference counted and must be balanced.
            </remarks>
        </member>
        <member name="T:PetaPoco.IDatabase">
            <summary>
            Represents the core functionality of PetaPoco.
            </summary>
        </member>
        <member name="P:PetaPoco.IDatabase.DefaultMapper">
            <summary>
            Gets the default mapper.
            </summary>
        </member>
        <member name="P:PetaPoco.IDatabase.LastSQL">
            <summary>
            Gets the SQL of the last executed command.
            </summary>
        </member>
        <member name="P:PetaPoco.IDatabase.LastArgs">
            <summary>
            Gets an array containing the arguments of the last executed command.
            </summary>
        </member>
        <member name="P:PetaPoco.IDatabase.LastCommand">
            <summary>
            Gets a formatted string describing the last executed command and its argument values.
            </summary>
        </member>
        <member name="P:PetaPoco.IDatabase.EnableAutoSelect">
            <summary>
            Gets or sets a value indicating whether automatic generation of the <c>SELECT</c> and <c>WHERE</c> parts of an SQL statement is
            enabled when not explicitly provided by the caller.
            </summary>
        </member>
        <member name="P:PetaPoco.IDatabase.EnableNamedParams">
            <summary>
            Gets or sets a value indicating whether named parameters are enabled.
            </summary>
        </member>
        <member name="P:PetaPoco.IDatabase.CommandTimeout">
            <summary>
            Gets or sets the wait time (in seconds) before terminating the attempt to execute a command.
            </summary>
        </member>
        <member name="P:PetaPoco.IDatabase.OneTimeCommandTimeout">
            <summary>
            Gets or sets a one-time timeout value to temporarily override <see cref="P:PetaPoco.IDatabase.CommandTimeout"/> for the next command execution.
            </summary>
        </member>
        <member name="P:PetaPoco.IDatabase.Provider">
            <summary>
            Gets the underlying database Provider.
            </summary>
        </member>
        <member name="P:PetaPoco.IDatabase.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
        </member>
        <member name="P:PetaPoco.IDatabase.IsolationLevel">
            <summary>
            Gets or sets the transaction isolation level.
            </summary>
        </member>
        <member name="M:PetaPoco.IDatabase.GetTransaction">
            <summary>
            Begins or continues a transaction.
            </summary>
        </member>
        <member name="M:PetaPoco.IDatabase.BeginTransaction">
            <summary>
            Begins a transaction scope.
            </summary>
        </member>
        <member name="M:PetaPoco.IDatabase.AbortTransaction">
            <summary>
            Aborts the entire outermost transaction scope.
            </summary>
        </member>
        <member name="M:PetaPoco.IDatabase.CompleteTransaction">
            <summary>
            Marks the current transaction scope as complete.
            </summary>
        </member>
        <member name="E:PetaPoco.IDatabase.TransactionStarted">
            <summary>
            Occurs when a new transaction has started.
            </summary>
        </member>
        <member name="E:PetaPoco.IDatabase.TransactionEnding">
            <summary>
            Occurs when a transaction is about to be rolled back or committed.
            </summary>
        </member>
        <member name="E:PetaPoco.IDatabase.CommandExecuting">
            <summary>
            Occurs when a database command is about to be executed.
            </summary>
        </member>
        <member name="E:PetaPoco.IDatabase.CommandExecuted">
            <summary>
            Occurs when a database command has been executed.
            </summary>
        </member>
        <member name="E:PetaPoco.IDatabase.ConnectionOpened">
            <summary>
            Occurs when a database connection has been opened.
            </summary>
        </member>
        <member name="E:PetaPoco.IDatabase.ConnectionClosing">
            <summary>
            Occurs when a database connection is about to be closed.
            </summary>
        </member>
        <member name="E:PetaPoco.IDatabase.ExceptionThrown">
            <summary>
            Occurs when a database exception has been thrown.
            </summary>
        </member>
        <member name="T:PetaPoco.IDatabaseBuildConfiguration">
            <summary>
            A helper interface which enables fluent configuration extension methods.
            </summary>
        </member>
        <member name="T:PetaPoco.IExecute">
            <summary>
            Specifies a set of methods for executing SQL non-query commands and scalar queries.
            </summary>
        </member>
        <member name="M:PetaPoco.IExecute.Execute(PetaPoco.Sql)">
            <summary>
            Executes a non-query command and returns the number of rows affected.
            </summary>
            <param name="sql">An SQL builder instance representing the SQL statement and its parameters.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:PetaPoco.IExecute.Execute(System.String,System.Object[])">
            <summary>
            Executes a non-query command and returns the number of rows affected.
            </summary>
            <param name="sql">The SQL string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:PetaPoco.IExecute.ExecuteScalar``1(PetaPoco.Sql)">
            <summary>
            Executes a scalar command and returns the first column of the first row in the result set.
            </summary>
            <typeparam name="T">The type of the result value.</typeparam>
            <param name="sql">An SQL builder instance representing the SQL statement and its parameters.</param>
            <returns>The scalar result value of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:PetaPoco.IExecute.ExecuteScalar``1(System.String,System.Object[])">
            <summary>
            Executes a scalar command and returns the first column of the first row in the result set.
            </summary>
            <typeparam name="T">The type of the result value.</typeparam>
            <param name="sql">The SQL query string.</param>
            <param name="args">The parameters to embed in the SQL query string.</param>
            <returns>The scalar result value of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:PetaPoco.IHideObjectMethods">
            <summary>
            Hides the compiler-generated public <see cref="T:System.Object"/> instance methods from the list of intellisense code completion suggestions.
            </summary>
            <remarks>
            Reference Project: MicroLite ORM (<see href="https://github.com/TrevorPilley/MicroLite"/>)
            <br/>Author: Trevor Pilley
            <br/>Source: <see href="https://github.com/TrevorPilley/MicroLite/blob/develop/MicroLite/IHideObjectMethods.cs"/>
            </remarks>
        </member>
        <member name="M:PetaPoco.IHideObjectMethods.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:PetaPoco.IHideObjectMethods.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:PetaPoco.IHideObjectMethods.GetType">
            <inheritdoc cref="M:System.Object.GetType"/>
        </member>
        <member name="M:PetaPoco.IHideObjectMethods.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:PetaPoco.IQuery">
            <summary>
            Specifies a set of methods for executing SQL queries and returning the result set as lists, enumerables, single POCOs, multi-POCOs,
            or paged results.
            </summary>
        </member>
        <member name="M:PetaPoco.IQuery.Query``1">
            <summary>
            Executes an auto-select query (<c>SELECT *</c>) and returns the results as a sequence of type <typeparamref name="T"/>.
            </summary>
            <remarks>
            <see cref="P:PetaPoco.IDatabase.EnableAutoSelect"/> must be enabled in order to generate the auto-select portion of the SQL statement.
            <para/><inheritdoc cref="M:PetaPoco.IQuery.Query``1(PetaPoco.Sql)"/>
            </remarks>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <returns>An enumerable sequence of POCOs of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``1(PetaPoco.Sql)">
            <param name="sql">An SQL builder instance representing the SQL query and its parameters.</param>
            <inheritdoc cref="M:PetaPoco.IQuery.Query``1(System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Query``1(System.String,System.Object[])">
            <summary>
            Executes a query and returns the results as a sequence of type <typeparamref name="T"/>.
            </summary>
            <remarks>
            Because this method streams the results from the database, care should be taken to not start a new query before finishing with
            and disposing of the previous one to prevent encountering database locks. In cases where contention could be an issue, consider
            using the equivalent Fetch method.
            </remarks>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="sql">The SQL query string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>An enumerable sequence of POCOs of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``2(PetaPoco.Sql)">
            <inheritdoc cref="M:PetaPoco.IQuery.Query``5(PetaPoco.Sql)"/>
        </member>
        <member name="M:PetaPoco.IQuery.Query``3(PetaPoco.Sql)">
            <inheritdoc cref="M:PetaPoco.IQuery.Query``5(PetaPoco.Sql)"/>
        </member>
        <member name="M:PetaPoco.IQuery.Query``4(PetaPoco.Sql)">
            <inheritdoc cref="M:PetaPoco.IQuery.Query``5(PetaPoco.Sql)"/>
        </member>
        <member name="M:PetaPoco.IQuery.Query``5(PetaPoco.Sql)">
            <summary>
            Executes a multi-poco query and projects the result sequence into a new form of type <typeparamref name="T1"/> using a default
            mapping function.
            </summary>
            <remarks>
            PetaPoco will automatically attempt to determine the split points and auto-map each additional POCO type into <typeparamref
            name="T1"/>.
            </remarks>
            <typeparam name="T1">The first POCO type.</typeparam>
            <typeparam name="T2">The second POCO type.</typeparam>
            <typeparam name="T3">The third POCO type.</typeparam>
            <typeparam name="T4">The fourth POCO type.</typeparam>
            <typeparam name="T5">The fifth POCO type.</typeparam>
            <param name="sql">An SQL builder instance representing the SQL query and its parameters.</param>
            <returns>An enumerable sequence of POCOs of type <typeparamref name="T1"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``2(System.String,System.Object[])">
            <inheritdoc cref="M:PetaPoco.IQuery.Query``5(System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Query``3(System.String,System.Object[])">
            <inheritdoc cref="M:PetaPoco.IQuery.Query``5(System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Query``4(System.String,System.Object[])">
            <inheritdoc cref="M:PetaPoco.IQuery.Query``5(System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Query``5(System.String,System.Object[])">
            <summary>
            Executes a multi-poco query and projects the result sequence into a new form of type <typeparamref name="T1"/> using a default
            mapping function.
            </summary>
            <remarks>
            PetaPoco will automatically attempt to determine the split points and auto-map each additional POCO type into <typeparamref
            name="T1"/>.
            </remarks>
            <typeparam name="T1">The first POCO type.</typeparam>
            <typeparam name="T2">The second POCO type.</typeparam>
            <typeparam name="T3">The third POCO type.</typeparam>
            <typeparam name="T4">The fourth POCO type.</typeparam>
            <typeparam name="T5">The fifth POCO type.</typeparam>
            <param name="sql">The SQL query string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>An enumerable sequence of POCOs of type <typeparamref name="T1"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``3(System.Func{``0,``1,``2},PetaPoco.Sql)">
            <inheritdoc cref="M:PetaPoco.IQuery.Query``6(System.Func{``0,``1,``2,``3,``4,``5},PetaPoco.Sql)"/>
        </member>
        <member name="M:PetaPoco.IQuery.Query``4(System.Func{``0,``1,``2,``3},PetaPoco.Sql)">
            <inheritdoc cref="M:PetaPoco.IQuery.Query``6(System.Func{``0,``1,``2,``3,``4,``5},PetaPoco.Sql)"/>
        </member>
        <member name="M:PetaPoco.IQuery.Query``5(System.Func{``0,``1,``2,``3,``4},PetaPoco.Sql)">
            <inheritdoc cref="M:PetaPoco.IQuery.Query``6(System.Func{``0,``1,``2,``3,``4,``5},PetaPoco.Sql)"/>
        </member>
        <member name="M:PetaPoco.IQuery.Query``6(System.Func{``0,``1,``2,``3,``4,``5},PetaPoco.Sql)">
            <summary>
            Executes a multi-poco query and projects the result sequence into a new form of type <typeparamref name="TResult"/> using the
            provided mapping function.
            </summary>
            <remarks>
            If <paramref name="projector"/> is <see langword="null"/>, PetaPoco will automatically attempt to determine the split points and
            auto-map each POCO type into <typeparamref name="TResult"/>.
            </remarks>
            <typeparam name="T1">The first POCO type.</typeparam>
            <typeparam name="T2">The second POCO type.</typeparam>
            <typeparam name="T3">The third POCO type.</typeparam>
            <typeparam name="T4">The fourth POCO type.</typeparam>
            <typeparam name="T5">The fifth POCO type.</typeparam>
            <typeparam name="TResult">The projected POCO type representing a single result record.</typeparam>
            <param name="projector">A function that transforms each of the given types into a <typeparamref name="TResult"/>, or <see
            langword="null"/> to use a default mapping function.</param>
            <param name="sql">An SQL builder instance representing the SQL query and its parameters.</param>
            <returns>An enumerable sequence of POCOs of type <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``3(System.Func{``0,``1,``2},System.String,System.Object[])">
            <inheritdoc cref="M:PetaPoco.IQuery.Query``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Query``4(System.Func{``0,``1,``2,``3},System.String,System.Object[])">
            <inheritdoc cref="M:PetaPoco.IQuery.Query``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Query``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object[])">
            <inheritdoc cref="M:PetaPoco.IQuery.Query``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Query``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Object[])">
            <summary>
            Executes a multi-poco query and projects the result sequence into a new form of type <typeparamref name="TResult"/> using the
            provided mapping function.
            </summary>
            <remarks>
            If <paramref name="projector"/> is <see langword="null"/>, PetaPoco will automatically attempt to determine the split points and
            auto-map each POCO type into <typeparamref name="TResult"/>.
            </remarks>
            <typeparam name="T1">The first POCO type.</typeparam>
            <typeparam name="T2">The second POCO type.</typeparam>
            <typeparam name="T3">The third POCO type.</typeparam>
            <typeparam name="T4">The fourth POCO type.</typeparam>
            <typeparam name="T5">The fifth POCO type.</typeparam>
            <typeparam name="TResult">The projected POCO type representing a single result record.</typeparam>
            <param name="projector">A function that transforms each of the given types into a <typeparamref name="TResult"/>, or <see
            langword="null"/> to use a default mapping function.</param>
            <param name="sql">The SQL query string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>An enumerable sequence of POCOs of type <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``1(System.Type[],System.Object,System.String,System.Object[])">
            <summary>
            Executes a multi-poco query and projects the result sequence into a new form of type <typeparamref name="TResult"/> using the
            provided mapping function.
            </summary>
            <remarks>
            If <paramref name="projector"/> is <see langword="null"/>, PetaPoco will automatically attempt to determine the split points and
            auto-map each POCO type into <typeparamref name="TResult"/>.
            </remarks>
            <typeparam name="TResult">The projected POCO type representing a single result record.</typeparam>
            <param name="types">An array of POCO types representing the types referenced in composite type <typeparamref
            name="TResult"/>.</param>
            <param name="projector">A function that transforms each of the given types into a <typeparamref name="TResult"/>, or <see
            langword="null"/> to use a default mapping function.</param>
            <param name="sql">The SQL query string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>An enumerable sequence of POCOs of type <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.QueryMultiple(PetaPoco.Sql)">
            <param name="sql">An SQL builder instance representing the SQL query and its parameters.</param>
            <inheritdoc cref="M:PetaPoco.IQuery.QueryMultiple(System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.QueryMultiple(System.String,System.Object[])">
            <summary>
            Executes a multi-result set query.
            </summary>
            <param name="sql">The SQL query string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>A GridReader for reading the sequence of results.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``1">
            <summary>
            Executes an auto-select query (<c>SELECT *</c>) and returns the results as a list of type <typeparamref name="T"/>.
            </summary>
            <remarks>
            <see cref="P:PetaPoco.IDatabase.EnableAutoSelect"/> must be enabled in order to generate the auto-select portion of the SQL statement.
            </remarks>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <returns>A list of POCOs of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``1(PetaPoco.Sql)">
            <param name="sql">An SQL builder instance representing the SQL query and its parameters.</param>
            <inheritdoc cref="M:PetaPoco.IQuery.Fetch``1(System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``1(System.String,System.Object[])">
            <summary>
            Executes a query and returns the results as a list of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="sql">The SQL query string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>A list of POCOs of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``2(PetaPoco.Sql)">
            <inheritdoc cref="M:PetaPoco.IQuery.Fetch``5(PetaPoco.Sql)"/>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``3(PetaPoco.Sql)">
            <inheritdoc cref="M:PetaPoco.IQuery.Fetch``5(PetaPoco.Sql)"/>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``4(PetaPoco.Sql)">
            <inheritdoc cref="M:PetaPoco.IQuery.Fetch``5(PetaPoco.Sql)"/>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``5(PetaPoco.Sql)">
            <summary>
            Executes a multi-poco query and projects the result sequence into a new form of type <typeparamref name="T1"/> using a default
            mapping function.
            </summary>
            <remarks>
            PetaPoco will automatically attempt to determine the split points and auto-map each additional POCO type into <typeparamref
            name="T1"/>.
            </remarks>
            <typeparam name="T1">The first POCO type.</typeparam>
            <typeparam name="T2">The second POCO type.</typeparam>
            <typeparam name="T3">The third POCO type.</typeparam>
            <typeparam name="T4">The fourth POCO type.</typeparam>
            <typeparam name="T5">The fifth POCO type.</typeparam>
            <param name="sql">An SQL builder instance representing the SQL query and its parameters.</param>
            <returns>A list of POCOs of type <typeparamref name="T1"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``2(System.String,System.Object[])">
            <inheritdoc cref="M:PetaPoco.IQuery.Fetch``5(System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``3(System.String,System.Object[])">
            <inheritdoc cref="M:PetaPoco.IQuery.Fetch``5(System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``4(System.String,System.Object[])">
            <inheritdoc cref="M:PetaPoco.IQuery.Fetch``5(System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``5(System.String,System.Object[])">
            <summary>
            Executes a multi-poco query and projects the result sequence into a new form of type <typeparamref name="T1"/> using a default
            mapping function.
            </summary>
            <remarks>
            PetaPoco will automatically attempt to determine the split points and auto-map each additional POCO type into <typeparamref
            name="T1"/>.
            </remarks>
            <typeparam name="T1">The first POCO type.</typeparam>
            <typeparam name="T2">The second POCO type.</typeparam>
            <typeparam name="T3">The third POCO type.</typeparam>
            <typeparam name="T4">The fourth POCO type.</typeparam>
            <typeparam name="T5">The fifth POCO type.</typeparam>
            <param name="sql">The SQL query string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>A list of POCOs of type <typeparamref name="T1"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``3(System.Func{``0,``1,``2},PetaPoco.Sql)">
            <inheritdoc cref="M:PetaPoco.IQuery.Fetch``6(System.Func{``0,``1,``2,``3,``4,``5},PetaPoco.Sql)"/>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``4(System.Func{``0,``1,``2,``3},PetaPoco.Sql)">
            <inheritdoc cref="M:PetaPoco.IQuery.Fetch``6(System.Func{``0,``1,``2,``3,``4,``5},PetaPoco.Sql)"/>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``5(System.Func{``0,``1,``2,``3,``4},PetaPoco.Sql)">
            <inheritdoc cref="M:PetaPoco.IQuery.Fetch``6(System.Func{``0,``1,``2,``3,``4,``5},PetaPoco.Sql)"/>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``6(System.Func{``0,``1,``2,``3,``4,``5},PetaPoco.Sql)">
            <summary>
            Executes a multi-poco query and projects the result sequence into a new form of type <typeparamref name="TResult"/> using the
            provided mapping function.
            </summary>
            <remarks>
            If <paramref name="projector"/> is <see langword="null"/>, PetaPoco will automatically attempt to determine the split points and
            auto-map each POCO type into <typeparamref name="TResult"/>.
            </remarks>
            <typeparam name="T1">The first POCO type.</typeparam>
            <typeparam name="T2">The second POCO type.</typeparam>
            <typeparam name="T3">The third POCO type.</typeparam>
            <typeparam name="T4">The fourth POCO type.</typeparam>
            <typeparam name="T5">The fifth POCO type.</typeparam>
            <typeparam name="TResult">The projected POCO type representing a single result record.</typeparam>
            <param name="projector">A function that transforms each of the given types into a <typeparamref name="TResult"/>, or <see
            langword="null"/> to use a default mapping function.</param>
            <param name="sql">An SQL builder instance representing the SQL query and its parameters.</param>
            <returns>A list of POCOs of type <typeparamref name="T1"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``3(System.Func{``0,``1,``2},System.String,System.Object[])">
            <inheritdoc cref="M:PetaPoco.IQuery.Fetch``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``4(System.Func{``0,``1,``2,``3},System.String,System.Object[])">
            <inheritdoc cref="M:PetaPoco.IQuery.Fetch``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object[])">
            <inheritdoc cref="M:PetaPoco.IQuery.Fetch``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Object[])">
            <summary>
            Executes a multi-poco query and projects the result sequence into a new form of type <typeparamref name="TResult"/> using the
            provided mapping function.
            </summary>
            <remarks>
            If <paramref name="projector"/> is <see langword="null"/>, PetaPoco will automatically attempt to determine the split points and
            auto-map each POCO type into <typeparamref name="TResult"/>.
            </remarks>
            <typeparam name="T1">The first POCO type.</typeparam>
            <typeparam name="T2">The second POCO type.</typeparam>
            <typeparam name="T3">The third POCO type.</typeparam>
            <typeparam name="T4">The fourth POCO type.</typeparam>
            <typeparam name="T5">The fifth POCO type.</typeparam>
            <typeparam name="TResult">The projected POCO type representing a single result record.</typeparam>
            <param name="projector">A function that transforms each of the given types into a <typeparamref name="TResult"/>, or <see
            langword="null"/> to use a default mapping function.</param>
            <param name="sql">The SQL query string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>A list of POCOs of type <typeparamref name="T1"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``1(System.Int64,System.Int64)">
            <summary>
            Executes an auto-select query (<c>SELECT *</c>) for a subset of records based on the specified parameters, and returns the
            results as a list of type <typeparamref name="T"/>.
            </summary>
            <remarks>
            <see cref="P:PetaPoco.IDatabase.EnableAutoSelect"/> must be enabled in order to generate the auto-select portion of the SQL statement.
            <para/>This method performs essentially the same operation as <see cref="M:PetaPoco.IQuery.SkipTake``1(System.Int64,System.Int64)"/>. Determining the number of
            records to skip, and how many to take, however, are calculated automatically based on the specified <paramref name="page"/>
            index and <paramref name="maxItemsPerPage"/> values.
            </remarks>
            <inheritdoc cref="M:PetaPoco.IQuery.Fetch``1(System.Int64,System.Int64,System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <remarks>
            This method performs essentially the same operation as <see cref="M:PetaPoco.IQuery.SkipTake``1(System.Int64,System.Int64,PetaPoco.Sql)"/>. Determining the number of
            records to skip, and how many to take, however, are calculated automatically based on the specified <paramref name="page"/>
            index and <paramref name="maxItemsPerPage"/> values.
            </remarks>
            <param name="page">The one-based page number used to calculate the number of records to skip.</param>
            <param name="maxItemsPerPage">The maximum number of records per page.</param>
            <param name="sql">An SQL builder instance representing the SQL query and its parameters.</param>
            <inheritdoc cref="M:PetaPoco.IQuery.Fetch``1(System.Int64,System.Int64,System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``1(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Executes a query for a subset of records based on the specified parameters, and returns the results as a list of type
            <typeparamref name="T"/>.
            </summary>
            <remarks>
            This method performs essentially the same operation as <see cref="M:PetaPoco.IQuery.SkipTake``1(System.Int64,System.Int64,System.String,System.Object[])"/>. Determining the
            number of records to skip, and how many to take, however, are calculated automatically based on the specified <paramref
            name="page"/> index and <paramref name="maxItemsPerPage"/> values.
            </remarks>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="page">The one-based page number used to calculate the number of records to skip.</param>
            <param name="maxItemsPerPage">The maximum number of records per page.</param>
            <param name="sql">The SQL query string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>A list containing at most <paramref name="maxItemsPerPage"/> POCOs of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Page``1(System.Int64,System.Int64)">
            <summary>
            Executes an auto-select query (<c>SELECT *</c>) for a subset of records based on the specified parameters, and returns the
            results as a Page of type <typeparamref name="T"/>.
            </summary>
            <remarks>
            <see cref="P:PetaPoco.IDatabase.EnableAutoSelect"/> must be enabled in order to generate the auto-select portion of the SQL statement.
            <para/>PetaPoco will automatically modify a default <c>SELECT *</c> statement to only retrieve the records for the specified
            page. It will also execute a second query to retrieve the total number of records in the result set.
            </remarks>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="page">The one-based page number used to calculate the number of records to skip.</param>
            <param name="maxItemsPerPage">The maximum number of records per page.</param>
            <returns>An initialized <see cref="T:PetaPoco.Page`1"/> containing a list of POCOs.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Page``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <param name="page">The one-based page number used to calculate the number of records to skip.</param>
            <param name="maxItemsPerPage">The maximum number of records per page.</param>
            <param name="sql">An SQL builder instance representing the SQL query and its parameters.</param>
            <inheritdoc cref="M:PetaPoco.IQuery.Page``1(System.Int64,System.Int64,System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Page``1(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Executes a query for a subset of records based on the specified parameters, and returns the results as a Page of type
            <typeparamref name="T"/>.
            </summary>
            <remarks>
            PetaPoco will automatically modify the supplied <c>SELECT</c> statement to only retrieve the records for the specified page. It
            will also execute a second query to retrieve the total number of records in the result set.
            </remarks>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="page">The one-based page number used to calculate the number of records to skip.</param>
            <param name="maxItemsPerPage">The maximum number of records per page.</param>
            <param name="sql">The SQL query string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>An initialized <see cref="T:PetaPoco.Page`1"/> containing a list of POCOs.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Page``1(System.Int64,System.Int64,PetaPoco.Sql,PetaPoco.Sql)">
            <param name="page">The one-based page number for this page.</param>
            <param name="maxItemsPerPage">The maximum number of records per page.</param>
            <param name="countSql">An SQL builder instance representing the SQL statement and its parameters, used to query the total number
            of records.</param>
            <param name="pageSql">An SQL builder instance representing the SQL statement and its parameters, used to retrieve a single page
            of results.</param>
            <inheritdoc cref="M:PetaPoco.IQuery.Page``1(System.Int64,System.Int64,System.String,System.Object[],System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Page``1(System.Int64,System.Int64,System.String,System.Object[],System.String,System.Object[])">
            <summary>
            Executes a query for a subset of records based on the specified parameters, and returns the results as a Page of type
            <typeparamref name="T"/>.
            </summary>
            <remarks>
            This method accepts two separate SQL statements that will be used explicitly for both parts of the page query. The <paramref
            name="page"/> and <paramref name="maxItemsPerPage"/> parameters are used to populate the returned Page object.
            </remarks>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="page">The one-based page number for this page.</param>
            <param name="maxItemsPerPage">The maximum number of records per page.</param>
            <param name="countSql">The SQL statement used to query the total number of records.</param>
            <param name="countArgs">The parameters to embed in <paramref name="countSql"/>.</param>
            <param name="pageSql">The SQL statement used to retrieve a single page of results.</param>
            <param name="pageArgs">The parameters to embed in the <paramref name="pageSql"/> string.</param>
            <returns>An initialized <see cref="T:PetaPoco.Page`1"/> containing a list of POCOs.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.SkipTake``1(System.Int64,System.Int64)">
            <summary>
            Executes an auto-select query (<c>SELECT *</c>) and returns a subset of the results as a list of type <typeparamref name="T"/>.
            </summary>
            <remarks>
            <see cref="P:PetaPoco.IDatabase.EnableAutoSelect"/> must be enabled in order to generate the auto-select portion of the SQL statement.
            <para/><inheritdoc cref="M:PetaPoco.IQuery.SkipTake``1(System.Int64,System.Int64,PetaPoco.Sql)"/>
            </remarks>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="skip">The number of records to skip.</param>
            <param name="take">The number of records to take.</param>
            <returns>A list of POCOs of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.SkipTake``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <param name="skip">The number of records to skip.</param>
            <param name="take">The number of records to take.</param>
            <param name="sql">An SQL builder instance representing the SQL query and its parameters.</param>
            <inheritdoc cref="M:PetaPoco.IQuery.SkipTake``1(System.Int64,System.Int64,System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.SkipTake``1(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Executes a query and returns a subset of the results as a list of type <typeparamref name="T"/>.
            </summary>
            <remarks>
            The provided SQL query will be modified to limit the starting offset and number of returned records based on the specified
            parameters.
            </remarks>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="skip">The number of records to skip.</param>
            <param name="take">The number of records to take.</param>
            <param name="sql">The SQL query string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>A list of POCOs of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Exists``1(System.Object)">
            <summary>
            Determines whether a record exists with the specified primary key value.
            </summary>
            <remarks>
            If provided a POCO instance as the <paramref name="pocoOrPrimaryKeyValue"/> parameter, PetaPoco will extract the value from the
            POCO's mapped primary key property, and perform the same query as if the primary key value was provided directly.
            </remarks>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="pocoOrPrimaryKeyValue">The primary key value, or a POCO containing an assigned primary key value.</param>
            <returns><see langword="true"/> if one or more records exist with the specified primary key value; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Exists``1(System.String,System.Object[])">
            <summary>
            Determines whether a record exists that matches the conditions defined by the specified query.
            </summary>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="sql">The SQL string representing the condition portion of the WHERE clause.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns><see langword="true"/> if one or more records exist that satisfy the conditions defined in the specified query;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Single``1(System.Object)">
            <summary>
            Returns the only record that matches the specified primary key value, and throws an exception if there is not exactly one
            matching record.
            </summary>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="primaryKey">The primary key value.</param>
            <returns>The single result returned by the query.</returns>
            <exception cref="T:System.InvalidOperationException">The result set is empty, or the result set contains more than one
            record.</exception>
        </member>
        <member name="M:PetaPoco.IQuery.Single``1(PetaPoco.Sql)">
            <param name="sql">An SQL builder instance representing the SQL query and its parameters.</param>
            <inheritdoc cref="M:PetaPoco.IQuery.Single``1(System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.Single``1(System.String,System.Object[])">
            <summary>
            Returns the only record that matches the specified query, and throws an exception if there is not exactly one matching record.
            </summary>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="sql">The SQL query string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>The single result returned by the query.</returns>
            <exception cref="T:System.InvalidOperationException">The result set is empty, or the result set contains more than one
            record.</exception>
        </member>
        <member name="M:PetaPoco.IQuery.SingleOrDefault``1(System.Object)">
            <summary>
            Returns the only record that matches the specified primary key value, or a default value if the result set is empty; this method
            throws an exception if there is more than one matching record.
            </summary>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="primaryKey">The primary key value.</param>
            <returns>default(T) if no record is found; otherwise, the single result returned by the query.</returns>
            <exception cref="T:System.InvalidOperationException">The result set contains more than one record.</exception>
        </member>
        <member name="M:PetaPoco.IQuery.SingleOrDefault``1(PetaPoco.Sql)">
            <param name="sql">An SQL builder instance representing the SQL query and its parameters.</param>
            <inheritdoc cref="M:PetaPoco.IQuery.SingleOrDefault``1(System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.SingleOrDefault``1(System.String,System.Object[])">
            <summary>
            Returns the only record that matches the specified query, or a default value if the result set is empty; this method throws an
            exception if there is more than one matching record.
            </summary>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="sql">The SQL query string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>default(T) if no record is found; otherwise, the single result returned by the query.</returns>
            <exception cref="T:System.InvalidOperationException">The result set contains more than one record.</exception>
        </member>
        <member name="M:PetaPoco.IQuery.First``1(PetaPoco.Sql)">
            <param name="sql">An SQL builder instance representing the SQL query and its parameters.</param>
            <inheritdoc cref="M:PetaPoco.IQuery.First``1(System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.First``1(System.String,System.Object[])">
            <summary>
            Returns the first record that matches the specified query, and throws an exception if the result set is empty.
            </summary>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="sql">The SQL query string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>The first result record returned by the specified query.</returns>
            <exception cref="T:System.InvalidOperationException">The result set is empty.</exception>
        </member>
        <member name="M:PetaPoco.IQuery.FirstOrDefault``1(PetaPoco.Sql)">
            <param name="sql">An SQL builder instance representing the SQL query and its parameters.</param>
            <inheritdoc cref="M:PetaPoco.IQuery.FirstOrDefault``1(System.String,System.Object[])"/>
        </member>
        <member name="M:PetaPoco.IQuery.FirstOrDefault``1(System.String,System.Object[])">
            <summary>
            Returns the first record that matches the specified query, or a default value if the result set is empty.
            </summary>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="sql">The SQL query string.</param>
            <param name="args">The parameters to embed in the SQL string.</param>
            <returns>default(T) if the result set is empty; otherwise, the first record that matches the specified query.</returns>
        </member>
        <member name="T:PetaPoco.IStoredProc">
            <summary>
            Specifies a set of methods for executing stored procedures.
            </summary>
        </member>
        <member name="M:PetaPoco.IStoredProc.ExecuteNonQueryProc(System.String,System.Object[])">
            <summary>
            Executes a non-query stored procedure and returns the number of rows affected.
            </summary>
            <remarks>
            For any arguments which are POCOs, each readable property will be turned into a named parameter for the stored procedure.
            Arguments which are IDbDataParameters will be passed through. Any other argument types will throw an exception.
            </remarks>
            <param name="storedProcedureName">The name of the stored procedure to execute.</param>
            <param name="args">The arguments to pass to the stored procedure.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:PetaPoco.IStoredProc.ExecuteScalarProc``1(System.String,System.Object[])">
            <summary>
            Executes a scalar stored procedure and returns the first column of the first row in the result set.
            </summary>
            <remarks>
            For any arguments which are POCOs, each readable property will be turned into a named parameter for the stored procedure.
            Arguments which are IDbDataParameters will be passed through. Any other argument types will throw an exception.
            </remarks>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="storedProcedureName">The name of the stored procedure to execute.</param>
            <param name="args">The arguments to pass to the stored procedure.</param>
            <returns>The scalar result value of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:PetaPoco.IStoredProc.QueryProc``1(System.String,System.Object[])">
            <summary>
            Executes a query stored procedure and returns the results as a sequence of type <typeparamref name="T"/>.
            </summary>
            <remarks>
            For any arguments which are POCOs, each readable property will be turned into a named parameter for the stored procedure.
            Arguments which are IDbDataParameters will be passed through. Any other argument types will throw an exception.
            </remarks>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="storedProcedureName">The name of the stored procedure to execute.</param>
            <param name="args">The arguments to pass to the stored procedure.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence of results.</returns>
        </member>
        <member name="M:PetaPoco.IStoredProc.FetchProc``1(System.String,System.Object[])">
            <summary>
            Executes a query stored procedure and returns the results as a list of type <typeparamref name="T"/>.
            </summary>
            <remarks>
            For any arguments which are POCOs, each readable property will be turned into a named parameter for the stored procedure.
            Arguments which are IDbDataParameters will be passed through. Any other argument types will throw an exception.
            </remarks>
            <typeparam name="T">The POCO type representing a single result record.</typeparam>
            <param name="storedProcedureName">The name of the stored procedure to execute.</param>
            <param name="args">The arguments to pass to the stored procedure.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing the results.</returns>
        </member>
        <member name="T:PetaPoco.ITransactionAccessor">
            <summary>
            Represents a contract which exposes the current <see cref="T:System.Data.IDbTransaction"/> instance.
            </summary>
        </member>
        <member name="P:PetaPoco.ITransactionAccessor.Transaction">
            <summary>
            Gets the current transaction instance.
            </summary>
            <returns>The current transaction instance. Returns <see langword="null"/> if no transaction is in progress.</returns>
        </member>
        <member name="T:PetaPoco.OracleProvider">
            <summary>
            Provides an implementation of <see cref="T:System.Data.Common.DbProviderFactory"/> for Oracle databases using the unmanaged Oracle Data Provider.
            </summary>
            <remarks>
            This provider uses the "Oracle.DataAccess.Client" ADO.NET driver for data access. For later versions of Oracle, the managed <see
            cref="T:PetaPoco.Providers.OracleDatabaseProvider"/> class should work fine. Uses reflection to load "Oracle.DataAccess" assembly and in-turn
            create connections and commands.
            <para>Thanks to Adam Schroder (@schotime) for this. <i>Currently untested.</i></para>
            </remarks>
            <example>
            <code language="cs" title="OracleProvider Usage">
            <![CDATA[
            var db = new PetaPoco.Database("CONNECTION_STRING", new PetaPoco.OracleProvider());
            ]]>
            </code>
            Or in your app/web config (be sure to change <c>ASSEMBLY_NAME</c> to the name of your assembly containing OracleProvider.cs):
            <code language="xml" title="OracleProvider web/app.config Usage">
            <![CDATA[
            <connectionStrings>
                <add name="oracle"
                     connectionString="CONNECTION_STRING"
                     providerName="Oracle" />
            </connectionStrings>
            <system.data>
                <DbProviderFactories>
                    <add name="PetaPoco Oracle Provider"
                         invariant="Oracle"
                         description="PetaPoco Oracle Provider"
                         type="PetaPoco.OracleProvider, ASSEMBLY_NAME" />
                </DbProviderFactories>
            </system.data>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:PetaPoco.OracleProvider.Instance">
            <summary>
            Singleton instance of OracleProvider. Required for DbProviderFactories.GetFactory() to work.
            </summary>
        </member>
        <member name="M:PetaPoco.OracleProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PetaPoco.OracleProvider"/> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to find the connection type from the assembly.</exception>
        </member>
        <member name="M:PetaPoco.OracleProvider.CreateConnection">
            <summary>
            Creates a new instance of an OracleConnection.
            </summary>
            <returns>A new <see cref="T:System.Data.Common.DbConnection"/>.</returns>
        </member>
        <member name="M:PetaPoco.OracleProvider.CreateCommand">
            <summary>
            Creates a new instance of an OracleCommand.
            </summary>
            <returns>A new <see cref="T:System.Data.Common.DbCommand"/>.</returns>
        </member>
        <member name="M:PetaPoco.OracleProvider.TypeFromAssembly(System.String,System.String)">
            <summary>
            Returns the Type for the specified <paramref name="typeName"/> from the provided <paramref name="assemblyName"/>.
            </summary>
            <param name="typeName">The name of the type to get.</param>
            <param name="assemblyName">The name of the assembly to get the type from.</param>
            <returns>The Type, or <see langword="null"/> if unable to locate it.</returns>
            <exception cref="T:System.TypeLoadException">Unable to load <paramref name="typeName"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to find the <paramref name="assemblyName"/>.</exception>
        </member>
        <member name="T:PetaPoco.Providers.FirebirdDbDatabaseProvider">
            <summary>
            Provides an implementation of <see cref="T:PetaPoco.Core.DatabaseProvider"/> for Firebird databases.
            </summary>
            <remarks>
            This provider uses the "FirebirdSql.Data.FirebirdClient" ADO.NET driver for data access.
            </remarks>
        </member>
        <member name="M:PetaPoco.Providers.FirebirdDbDatabaseProvider.GetFactory">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.FirebirdDbDatabaseProvider.BuildPageQuery(System.Int64,System.Int64,PetaPoco.Utilities.SQLParts,System.Object[]@)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.FirebirdDbDatabaseProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.FirebirdDbDatabaseProvider.EscapeSqlIdentifier(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:PetaPoco.Providers.MariaDbDatabaseProvider">
            <summary>
            Provides an implementation of <see cref="T:PetaPoco.Core.DatabaseProvider"/> for MariaDB databases.
            </summary>
            <remarks>
            This provider uses the "MySql.Data.MySqlClient" ADO.NET driver for data access.
            </remarks>
        </member>
        <member name="M:PetaPoco.Providers.MariaDbDatabaseProvider.GetFactory">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.MariaDbDatabaseProvider.GetParameterPrefix(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.MariaDbDatabaseProvider.EscapeSqlIdentifier(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.MariaDbDatabaseProvider.GetExistsSql">
            <inheritdoc/>
        </member>
        <member name="T:PetaPoco.Providers.MsAccessDbDatabaseProvider">
            <summary>
            Provides an implementation of <see cref="T:PetaPoco.Core.DatabaseProvider"/> for Microsoft Access databases.
            </summary>
            <remarks>
            This provider uses the "System.Data.OleDb" ADO.NET driver for data access.
            </remarks>
        </member>
        <member name="M:PetaPoco.Providers.MsAccessDbDatabaseProvider.GetFactory">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.MsAccessDbDatabaseProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.MsAccessDbDatabaseProvider.BuildPageQuery(System.Int64,System.Int64,PetaPoco.Utilities.SQLParts,System.Object[]@)">
            <summary>
            Page queries are not supported by MS Access database.
            </summary>
            <returns>This method always throws a <see cref="T:System.NotSupportedException"/>.</returns>
            <exception cref="T:System.NotSupportedException">The MS Access provider does not support paging.</exception>
            <inheritdoc/>
        </member>
        <member name="T:PetaPoco.Providers.MySqlConnectorDatabaseProvider">
            <summary>
            Provides an implementation of <see cref="T:PetaPoco.Core.DatabaseProvider"/> for MySQL databases using the MySqlConnector library.
            </summary>
            <remarks>
            This provider uses the "MySqlConnector" ADO.NET driver for data access.
            </remarks>
        </member>
        <member name="M:PetaPoco.Providers.MySqlConnectorDatabaseProvider.GetFactory">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.MySqlConnectorDatabaseProvider.GetParameterPrefix(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.MySqlConnectorDatabaseProvider.EscapeSqlIdentifier(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.MySqlConnectorDatabaseProvider.GetExistsSql">
            <inheritdoc/>
        </member>
        <member name="T:PetaPoco.Providers.MySqlDatabaseProvider">
            <summary>
            Provides an implementation of <see cref="T:PetaPoco.Core.DatabaseProvider"/> for MySQL databases.
            </summary>
            <remarks>
            This provider uses the "MySql.Data.MySqlClient" ADO.NET driver for data access.
            </remarks>
        </member>
        <member name="M:PetaPoco.Providers.MySqlDatabaseProvider.GetFactory">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.MySqlDatabaseProvider.GetParameterPrefix(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.MySqlDatabaseProvider.EscapeSqlIdentifier(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.MySqlDatabaseProvider.GetExistsSql">
            <inheritdoc/>
        </member>
        <member name="T:PetaPoco.Providers.OracleDatabaseProvider">
            <summary>
            Provides an implementation of <see cref="T:PetaPoco.Core.DatabaseProvider"/> for Oracle databases using the managed Oracle Data Provider.
            </summary>
            <remarks>
            This provider uses the "Oracle.ManagedDataAccess.Client" ADO.NET driver for data access.
            </remarks>
        </member>
        <member name="M:PetaPoco.Providers.OracleDatabaseProvider.GetParameterPrefix(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.OracleDatabaseProvider.PreExecute(System.Data.IDbCommand)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.OracleDatabaseProvider.BuildPageQuery(System.Int64,System.Int64,PetaPoco.Utilities.SQLParts,System.Object[]@)">
            <inheritdoc/>
            <exception cref="T:System.Exception">A paged query does not alias '*'</exception>
        </member>
        <member name="M:PetaPoco.Providers.OracleDatabaseProvider.GetFactory">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.OracleDatabaseProvider.EscapeSqlIdentifier(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.OracleDatabaseProvider.GetAutoIncrementExpression(PetaPoco.TableInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.OracleDatabaseProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:PetaPoco.Providers.PostgreSQLDatabaseProvider">
            <summary>
            Provides an implementation of <see cref="T:PetaPoco.Core.DatabaseProvider"/> for PostgreSQL databases.
            </summary>
            <remarks>
            This provider uses the "Npgsql" ADO.NET driver for data access.
            </remarks>
        </member>
        <member name="P:PetaPoco.Providers.PostgreSQLDatabaseProvider.HasNativeGuidSupport">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.PostgreSQLDatabaseProvider.GetFactory">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.PostgreSQLDatabaseProvider.GetExistsSql">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.PostgreSQLDatabaseProvider.MapParameterValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.PostgreSQLDatabaseProvider.EscapeSqlIdentifier(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.PostgreSQLDatabaseProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:PetaPoco.Providers.SQLiteDatabaseProvider">
            <summary>
            Provides an implementation of <see cref="T:PetaPoco.Core.DatabaseProvider"/> for SQLite databases.
            </summary>
            <remarks>
            This provider can use either the "System.Data.SQLite" or "Microsoft.Data.Sqlite" ADO.NET drivers for data access.
            </remarks>
        </member>
        <member name="M:PetaPoco.Providers.SQLiteDatabaseProvider.GetFactory">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.SQLiteDatabaseProvider.MapParameterValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.SQLiteDatabaseProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.SQLiteDatabaseProvider.GetExistsSql">
            <inheritdoc/>
        </member>
        <member name="T:PetaPoco.Providers.SqlServerCEDatabaseProviders">
            <summary>
            Provides an implementation of <see cref="T:PetaPoco.Core.DatabaseProvider"/> for Microsoft SQL Server Compact Edition databases.
            </summary>
            <remarks>
            This provider uses the "System.Data.SqlServerCe" ADO.NET driver for data access. Note that this driver is end-of-life (<a
            href="https://learn.microsoft.com/en-us/lifecycle/products/microsoft-sql-server-compact-40/">reference</a>).
            </remarks>
        </member>
        <member name="M:PetaPoco.Providers.SqlServerCEDatabaseProviders.GetFactory">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.SqlServerCEDatabaseProviders.BuildPageQuery(System.Int64,System.Int64,PetaPoco.Utilities.SQLParts,System.Object[]@)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.SqlServerCEDatabaseProviders.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:PetaPoco.Providers.SqlServerDatabaseProvider">
            <summary>
            Provides an implementation of <see cref="T:PetaPoco.Core.DatabaseProvider"/> for Microsoft SQL Server databases.
            </summary>
            <remarks>
            This provider uses the "System.Data.SqlClient" ADO.NET driver for data access. Note that this driver is end-of-life (<see
            href="https://learn.microsoft.com/en-us/sql/connect/ado-net/introduction-microsoft-data-sqlclient-namespace/">reference</see> and
            <see href="https://www.connectionstrings.com/the-new-microsoft-data-sqlclient-explained/">more info</see>). Consider using <see
            cref="T:PetaPoco.Providers.SqlServerMsDataDatabaseProvider"/> as an alternative, which uses the "Microsoft.Data.SqlClient" driver.
            </remarks>
        </member>
        <member name="M:PetaPoco.Providers.SqlServerDatabaseProvider.GetFactory">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.SqlServerDatabaseProvider.BuildPageQuery(System.Int64,System.Int64,PetaPoco.Utilities.SQLParts,System.Object[]@)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.SqlServerDatabaseProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.SqlServerDatabaseProvider.GetExistsSql">
            <inheritdoc/>
        </member>
        <member name="M:PetaPoco.Providers.SqlServerDatabaseProvider.GetInsertOutputClause(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:PetaPoco.Providers.SqlServerMsDataDatabaseProvider">
            <summary>
            Provides an implementation of <see cref="T:PetaPoco.Core.DatabaseProvider"/> for Microsoft SQL Server databases.
            </summary>
            <remarks>
            This provider uses the "Microsoft.Data.SqlClient" ADO.NET driver for data access.
            </remarks>
        </member>
        <member name="M:PetaPoco.Providers.SqlServerMsDataDatabaseProvider.GetFactory">
            <inheritdoc/>
        </member>
        <member name="T:PetaPoco.Utilities.IPagingHelper">
            <summary>
            Represents the contract for a paging helper.
            </summary>
        </member>
        <member name="M:PetaPoco.Utilities.IPagingHelper.SplitSQL(System.String,PetaPoco.Utilities.SQLParts@)">
            <summary>
            Splits the given SQL statement into parts, and initializes an <see cref="T:PetaPoco.Utilities.SQLParts"/> instance containing the resulting
            substrings at <paramref name="parts"/>.
            </summary>
            <param name="sql">The SQL string to be parsed. This value must not be <see langword="null"/>.</param>
            <param name="parts">When this method returns, the parsed SQL statement split into it's constituent parts, if the SQL statement
            could be split; otherwise, <see langword="null"/>. This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the SQL statement could be parsed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:PetaPoco.Utilities.PagingHelper">
            <summary>
            Provides utility methods for splitting SQL queries into parts and handling paging.
            </summary>
        </member>
        <member name="P:PetaPoco.Utilities.PagingHelper.RegexColumns">
            <summary>
            Gets the regular expression used for matching the <c>SELECT</c> clause.
            </summary>
            <remarks>
            <para>Beginning at the start of the string, this expression matches the keyword <c>SELECT</c> (inclusive), followed by one or
            more spaces, capturing everything in front of the word <c>FROM</c> (exclusive), accounting for special handling of nested
            parentheses, aggregate functions, etc.</para>
            <c><u>SELECT column1, column2</u> FROM tbl;</c><br/>
            <c><u>SELECT SUM(column1) AS sum_col1, column2</u> FROM tbl;</c>
            </remarks>
        </member>
        <member name="P:PetaPoco.Utilities.PagingHelper.RegexDistinct">
            <summary>
            Gets the regular expression used for matching the <c>DISTINCT</c> keyword.
            </summary>
            <remarks>
            <para>Starting at the beginning of the string, this expression performs a simple match for the <c>DISTINCT</c> keyword in an SQL
            statement, followed by a space. Everything after is excluded.</para>
            <c>SELECT <u>DISTINCT</u> * FROM tbl;</c><br/>
            <c>SELECT <u>DISTINCT</u> column1 FROM tbl;</c>
            </remarks>
        </member>
        <member name="P:PetaPoco.Utilities.PagingHelper.RegexOrderBy">
            <summary>
            Gets the regular expression used for matching the <c>ORDER BY</c> clause.
            </summary>
            <remarks>
            <para>This expression matches the <c>ORDER BY</c> clause, followed by one or more column names as well as the accompanying
            optional sort order modifier keywords, <c>ASC</c> and <c>DESC</c>, for each (inclusive). <c>AS</c> alias declarations are
            excluded from the match.</para>
            <c>SELECT * FROM tbl <u>ORDER BY column1, column2 DESC;</u></c><br/>
            <c>SELECT column1, column2 AS col2 <u>ORDER BY SUM(column1) ASC, col2;</u></c><br/>
            </remarks>
        </member>
        <member name="P:PetaPoco.Utilities.PagingHelper.SimpleRegexOrderBy">
            <summary>
            Gets the regular expression used for matching the <c>ORDER BY</c> keyword.
            </summary>
            <remarks>
            <para>This expression performs a simple match for the <c>ORDER BY</c> keyword in a SQL statement, followed by a space.
            Everything after is excluded.</para>
            <c>SELECT * FROM tbl <u>ORDER BY</u> column1, column2 DESC;</c><br/>
            <c>SELECT column1, column2 AS col2 <u>ORDER BY</u> SUM(column1) ASC, col2;</c>
            </remarks>
        </member>
        <member name="P:PetaPoco.Utilities.PagingHelper.RegexGroupBy">
            <summary>
            Gets the regular expression used for matching the <c>GROUP BY</c> clause.
            </summary>
            <remarks>
            <para>Matches the <c>GROUP BY</c> clause, followed by one or more column names along with any aggregate functions or
            expressions. <c>AS</c> alias declarations are excluded from the match.</para>
            <c>SELECT * FROM tbl <u>GROUP BY column1, column2</u>;</c><br/>
            <c>SELECT column1, column2 <u>GROUP BY SUM(column1), column2</u>;</c><br/>
            <c>SELECT column1 AS col1 FROM tbl <u>GROUP BY col1</u> ORDER BY col1;</c>
            </remarks>
        </member>
        <member name="P:PetaPoco.Utilities.PagingHelper.SimpleRegexGroupBy">
            <summary>
            Gets the regular expression used for matching the <c>GROUP BY</c> keyword.
            </summary>
            <remarks>
            <para>This expression performs a simple match for the <c>GROUP BY</c> keyword in a SQL statement, followed by a space.
            Everything after is excluded.</para>
            <c>SELECT * FROM tbl <u>GROUP BY</u> column1, column2;</c><br/>
            <c>SELECT column1, COUNT(column2) AS count_col2 FROM tbl <u>GROUP BY</u> column1 ORDER BY column1;</c>
            </remarks>
        </member>
        <member name="P:PetaPoco.Utilities.PagingHelper.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:PetaPoco.Utilities.PagingHelper"/> class.
            </summary>
        </member>
        <member name="M:PetaPoco.Utilities.PagingHelper.SplitSQL(System.String,PetaPoco.Utilities.SQLParts@)">
            <inheritdoc/>
        </member>
        <member name="T:PetaPoco.Utilities.SQLParts">
            <summary>
            Represents a parsed SQL statement, providing access to its constituent parts for convenient modification and rebuilding.
            </summary>
        </member>
        <member name="F:PetaPoco.Utilities.SQLParts.Sql">
            <summary>
            Gets or sets the complete SQL statement.
            </summary>
        </member>
        <member name="F:PetaPoco.Utilities.SQLParts.SqlCount">
            <summary>
            Gets or sets the <c>COUNT</c> clause of the SQL statement, used for operations such as Exists and paged requests.
            </summary>
        </member>
        <member name="F:PetaPoco.Utilities.SQLParts.SqlSelectRemoved">
            <summary>
            Gets or sets the SQL statement with the <c>SELECT</c> clause removed, for generating auto-select queries.
            </summary>
        </member>
        <member name="F:PetaPoco.Utilities.SQLParts.SqlOrderBy">
            <summary>
            Gets or sets the <c>ORDER BY</c> clause of the SQL statement, used for sorting the records.
            </summary>
        </member>
    </members>
</doc>
